{"ast":null,"code":"import _objectSpread from\"C:/Users/alex_/Desktop/Magna-ISO9001/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useEffect,useState,useRef,useContext}from\"react\";import{useParams,useLocation,useNavigate}from\"react-router-dom\";import{UserContext}from\"../context/userContext\";import AIAssistant from\"./AIAssistant/AIAssistant\";import TabelaPdf from\"../pages/tableDisplay\";import Template1 from\"./templates/TabelaTemplate1\";import ExportPdfButton from\"./Buttons/exportPdf\";import PreviewPdfButton from\"./Buttons/previewPDF\";// Definição dos dois templates\nimport{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const tabelas=[{key:\"obs\",headers:[],fieldNames:[[\"table1_r1\"],[\"table1_r2\"],[\"table1_r3\"],[\"table1_r4\"],[\"table1_r5\"]],rows:5,cols:1},{key:\"main\",headers:[/*#__PURE__*/_jsxs(_Fragment,{children:[\"Fluxo\",/*#__PURE__*/_jsx(\"br\",{}),\"das A\\xE7\\xF5es\"]}),/*#__PURE__*/_jsx(_Fragment,{children:\"Descri\\xE7\\xE3o\"}),/*#__PURE__*/_jsx(_Fragment,{children:\"Respons\\xE1vel\"}),/*#__PURE__*/_jsxs(_Fragment,{children:[\"Documentos\",/*#__PURE__*/_jsx(\"br\",{}),\"Associados\"]}),/*#__PURE__*/_jsxs(_Fragment,{children:[\"Instru\\xE7\\xF5es\",/*#__PURE__*/_jsx(\"br\",{}),\"de Trabalho\"]})],fieldNames:[[\"table2_r2_c1\",\"table2_r2_c2\",\"table2_r2_c3\",\"table2_r2_c4\",\"table2_r2_c5\"],[\"table2_r3_c1\",\"table2_r3_c2\",\"table2_r3_c3\",\"table2_r3_c4\",\"table2_r3_c5\"],[\"table2_r4_c1\",\"table2_r4_c2\",\"table2_r4_c3\",\"table2_r4_c4\",\"table2_r4_c5\"],[\"table2_r5_c1\",\"table2_r5_c2\",\"table2_r5_c3\",\"table2_r5_c4\",\"table2_r5_c5\"],[\"table2_r6_c1\",\"table2_r6_c2\",\"table2_r6_c3\",\"table2_r6_c4\",\"table2_r6_c5\"],[\"table2_r7_c1\",\"table2_r7_c2\",\"table2_r7_c3\",\"table2_r7_c4\",\"table2_r7_c5\"]],rows:6,cols:5}];const tabelasTemplate2=[{key:\"processo\",headers:[\"DONO DO PROCESSO (nomeado):\",\"OBJETIVO DO PROCESSO:\",\"SERVIÇOS DE ENTRADAS\",\"SERVIÇO DE SAÍDA\"],fieldNames:[[\"dono_processo\"],[\"objetivo_processo\"],[\"servicos_entrada\"],[\"servico_saida\"]],rows:4,cols:1},{key:\"main\",headers:[\"Principais Atividades\",\"Procedimentos Associados\",\"Requisitos ISO 9001\",\"Requisitos DGERT\",\"Requisitos EQAVET\",\"Requisitos CQCQ\"],fieldNames:[[\"atividades_r1_c1\",\"atividades_r1_c2\",\"atividades_r1_c3\",\"atividades_r1_c4\",\"atividades_r1_c5\",\"atividades_r1_c6\"],[\"atividades_r2_c1\",\"atividades_r2_c2\",\"atividades_r2_c3\",\"atividades_r2_c4\",\"atividades_r2_c5\",\"atividades_r2_c6\"],[\"atividades_r3_c1\",\"atividades_r3_c2\",\"atividades_r3_c3\",\"atividades_r3_c4\",\"atividades_r3_c5\",\"atividades_r3_c6\"],[\"atividades_r4_c1\",\"atividades_r4_c2\",\"atividades_r4_c3\",\"atividades_r4_c4\",\"atividades_r4_c5\",\"atividades_r4_c6\"]// Adiciona mais linhas se precisares\n],rows:4,// Quantas linhas quiseres\ncols:6},{key:\"indicadores\",headers:[\"Indicadores de monitorização do processo\"],fieldNames:[[\"indicadores_r1\"]// Adiciona mais se precisares\n],rows:2,cols:1}];export default function TablePageUnified(){var _location$state,_location$state2,_location$state3;// Estado para histórico de alterações - só adiciona quando guarda\nconst[history,setHistory]=useState([]);console.log('🔍 DEBUG Estado do histórico:',history);const{user}=useContext(UserContext);const{filename}=useParams();const location=useLocation();const navigate=useNavigate();// Context do usuário para verificar permissões\nconst{username}=useContext(UserContext);const originalFilename=location!==null&&location!==void 0&&(_location$state=location.state)!==null&&_location$state!==void 0&&_location$state.originalFilename?location.state.originalFilename:decodeURIComponent(filename||\"\").replace(/__/g,'/').replace(/-/g,' ');// Extrai o nome do processo (antes do primeiro \"/\")\nconst nomeProcesso=originalFilename?originalFilename.split('/')[0]:\"\";// Extrai só o nome do ficheiro (após o último '__')\nconst fileNameOnly=filename?filename.split('__').pop():\"\";// Escolhe o template conforme o filename\nlet template,isTemplate2=false;if(/^\\d{2}/.test(fileNameOnly)){// Arquivos que começam com 2 dígitos são Template 1\ntemplate=tabelas;}else if(/^\\d/.test(fileNameOnly)){// Arquivos que começam com 1 dígito são Template 2\ntemplate=tabelasTemplate2;isTemplate2=true;}else{template=tabelas;// fallback para Template 1\n}// Estado das tabelas\nconst[tableData,setTableData]=useState(()=>{const initial=template.reduce((acc,t)=>_objectSpread(_objectSpread({},acc),{},{[t.key]:Array.from({length:t.rows},()=>Array(t.cols).fill(\"\"))}),{});return initial;});const[mainFieldNames,setMainFieldNames]=useState(()=>{return[...template[1].fieldNames];});const[atividades,setAtividades]=useState([[\"\",\"\",\"\",\"\",\"\",\"\"],[\"\",\"\",\"\",\"\",\"\",\"\"],[\"\",\"\",\"\",\"\",\"\",\"\"],[\"\",\"\",\"\",\"\",\"\",\"\"]]);const[indicadores,setIndicadores]=useState(()=>{// Inicializa baseado no template\nif(isTemplate2){return[\"\",\"\",\"\"];// Manter como array para Template2 também para permitir dinamismo\n}else{return[\"\",\"\",\"\"];}});const[donoProcesso,setDonoProcesso]=useState(\"\");const[donoProcessoOriginal,setDonoProcessoOriginal]=useState(\"\");const[objetivoProcesso,setObjetivoProcesso]=useState(\"\");const[objetivoProcessoOriginal,setObjetivoProcessoOriginal]=useState(\"\");const[servicosEntrada,setServicosEntrada]=useState(\"\");const[servicosEntradaOriginal,setServicosEntradaOriginal]=useState(\"\");const[servicoSaida,setServicoSaida]=useState(\"\");const[servicoSaidaOriginal,setServicoSaidaOriginal]=useState(\"\");const[obsTableOriginal,setObsTableOriginal]=useState([]);const[mainTableOriginal,setMainTableOriginal]=useState([]);const[atividadesOriginal,setAtividadesOriginal]=useState([]);const[indicadoresOriginal,setIndicadoresOriginal]=useState([]);const[funcionarios,setFuncionarios]=useState([]);// Estado para controlar se as tabelas são editáveis (inicialmente false)\nconst[isEditable,setIsEditable]=useState(false);// Receber canEdit do state (calculado em selectPdf) ou fallback para false\nconst canEditFromState=location===null||location===void 0?void 0:(_location$state2=location.state)===null||_location$state2===void 0?void 0:_location$state2.canEdit;// Receber isSuperAdmin do state (calculado em selectPdf) ou fallback\nconst isSuperAdminFromState=location===null||location===void 0?void 0:(_location$state3=location.state)===null||_location$state3===void 0?void 0:_location$state3.isSuperAdmin;// Função utilitária para verificar se um usuário está na lista de donos do processo\nconst isUserOwner=(donoProcessoString,username)=>{if(!donoProcessoString||!username)return false;const donosArray=donoProcessoString.split(',').map(nome=>nome.trim()).filter(nome=>nome);return donosArray.includes(username);};// Fallback: verificar permissões localmente se não vier do state\nconst isAdmin=username===\"superadmin\"||username===\"SuperAdmin\";const canEditFallback=isAdmin||isUserOwner(donoProcesso,username);// Usar o valor do state se disponível, senão usar fallback\nconst canEdit=canEditFromState!==undefined?canEditFromState:canEditFallback;const isSuperAdmin=isSuperAdminFromState!==undefined?isSuperAdminFromState:isAdmin;// Carregar funcionários do backend\nuseEffect(()=>{const carregarFuncionarios=async()=>{try{const response=await fetch(\"https://api9001.duckdns.org/users/getAllUsers\");if(!response.ok){throw new Error(\"Erro ao carregar funcionários\");}const funcionariosData=await response.json();setFuncionarios(funcionariosData);}catch(error){console.error(\"Erro ao carregar funcionários:\",error);setFuncionarios([]);// Array vazio em caso de erro\n}};carregarFuncionarios();},[]);// Estado para rastrear se há mudanças não guardadas\nconst[hasUnsavedChanges,setHasUnsavedChanges]=useState(false);// Effect para prevenir saída da página com mudanças não guardadas\nuseEffect(()=>{const handleBeforeUnload=e=>{if(hasUnsavedChanges){e.preventDefault();e.returnValue='Tem alterações não guardadas. Tem a certeza que quer sair?';return'Tem alterações não guardadas. Tem a certeza que quer sair?';}};window.addEventListener('beforeunload',handleBeforeUnload);return()=>{window.removeEventListener('beforeunload',handleBeforeUnload);};},[hasUnsavedChanges]);// Effect separado para interceptar o botão voltar do browser\nuseEffect(()=>{let isBlocking=false;const setupBlocker=()=>{if(hasUnsavedChanges&&!isBlocking){isBlocking=true;// Adiciona um estado \"guardião\" ao histórico\nwindow.history.pushState({blocker:true},'',window.location.href);}else if(!hasUnsavedChanges&&isBlocking){var _window$history$state;isBlocking=false;// Remove o estado guardião se não há mudanças\nif((_window$history$state=window.history.state)!==null&&_window$history$state!==void 0&&_window$history$state.blocker){window.history.back();}}};const handlePopState=event=>{var _event$state;if(hasUnsavedChanges&&(_event$state=event.state)!==null&&_event$state!==void 0&&_event$state.blocker){// Interceptou o botão voltar\nconst shouldLeave=window.confirm('Tem alterações não guardadas. Tem a certeza que quer sair?');if(shouldLeave){// Utilizador quer sair - limpa o estado e navega\nsetHasUnsavedChanges(false);isBlocking=false;// Navega para trás (salta o estado blocker)\nwindow.history.go(-2);}else{// Utilizador quer ficar - reestabelece o blocker\nwindow.history.pushState({blocker:true},'',window.location.href);}}};setupBlocker();window.addEventListener('popstate',handlePopState);return()=>{var _window$history$state2;window.removeEventListener('popstate',handlePopState);// Limpa o estado blocker se existir\nif(isBlocking&&(_window$history$state2=window.history.state)!==null&&_window$history$state2!==void 0&&_window$history$state2.blocker){window.history.back();}// Cleanup dos timeouts\nclearTimeout(window.atividadesTimeout);clearTimeout(window.mainTableTimeout);clearTimeout(window.obsTableTimeout);clearTimeout(window.template2TableTimeout);};},[hasUnsavedChanges]);// Handlers para Template2 - removido histórico automático\nconst handleAtividadesChange=(rowIdx,colIdx,value)=>{setAtividades(prev=>{const novo=prev.map(row=>[...row]);novo[rowIdx][colIdx]=value;return novo;});setHasUnsavedChanges(true);};const handleIndicadoresChange=(field,value)=>{let index=field;if(isTemplate2){// Para Template2, sempre trata como array mas converte índices se necessário\nif(typeof field==='string'&&field.startsWith('indicadores_r')){// Se receber chave de objeto, converte para índice\nconst match=field.match(/indicadores_r(\\d+)/);if(match){index=parseInt(match[1])-1;setIndicadores(prev=>{const novo=[...prev];novo[index]=value;return novo;});}}else{// Se receber índice numérico diretamente\nsetIndicadores(prev=>{const novo=[...prev];novo[field]=value;return novo;});}}else{// Para Template1, trata como array\nsetIndicadores(prev=>{const novo=[...prev];novo[field]=value;return novo;});}setHasUnsavedChanges(true);};// Funções para manipulação de linhas das atividades\nconst handleMoveAtividadeUp=rowIdx=>{if(rowIdx>0){setAtividades(prev=>{const newAtividades=[...prev];const[movedRow]=newAtividades.splice(rowIdx,1);newAtividades.splice(rowIdx-1,0,movedRow);return newAtividades;});setHasUnsavedChanges(true);}};const handleMoveAtividadeDown=rowIdx=>{if(rowIdx<atividades.length-1){setAtividades(prev=>{const newAtividades=[...prev];const[movedRow]=newAtividades.splice(rowIdx,1);newAtividades.splice(rowIdx+1,0,movedRow);return newAtividades;});setHasUnsavedChanges(true);}};const handleInsertAtividadeAbove=rowIdx=>{const newRow=[\"\",\"\",\"\",\"\",\"\",\"\"];setAtividades(prev=>{const newAtividades=[...prev];newAtividades.splice(rowIdx,0,newRow);return newAtividades;});setHasUnsavedChanges(true);};const handleInsertAtividadeBelow=rowIdx=>{const newRow=[\"\",\"\",\"\",\"\",\"\",\"\"];setAtividades(prev=>{const newAtividades=[...prev];newAtividades.splice(rowIdx+1,0,newRow);return newAtividades;});setHasUnsavedChanges(true);};const handleDeleteAtividade=rowIdx=>{if(atividades.length>1){setAtividades(prev=>{const newAtividades=[...prev];newAtividades.splice(rowIdx,1);return newAtividades;});setHasUnsavedChanges(true);}};// Funções para manipulação de indicadores\nconst handleMoveIndicadorUp=rowIdx=>{if(rowIdx>0){setIndicadores(prev=>{const newIndicadores=[...prev];const[movedItem]=newIndicadores.splice(rowIdx,1);newIndicadores.splice(rowIdx-1,0,movedItem);return newIndicadores;});setHasUnsavedChanges(true);}};const handleMoveIndicadorDown=rowIdx=>{if(rowIdx<indicadores.length-1){setIndicadores(prev=>{const newIndicadores=[...prev];const[movedItem]=newIndicadores.splice(rowIdx,1);newIndicadores.splice(rowIdx+1,0,movedItem);return newIndicadores;});setHasUnsavedChanges(true);}};const handleInsertIndicadorAbove=rowIdx=>{setIndicadores(prev=>{const newIndicadores=[...prev];newIndicadores.splice(rowIdx,0,\"\");return newIndicadores;});setHasUnsavedChanges(true);};const handleInsertIndicadorBelow=rowIdx=>{setIndicadores(prev=>{const newIndicadores=[...prev];newIndicadores.splice(rowIdx+1,0,\"\");return newIndicadores;});setHasUnsavedChanges(true);};const handleDeleteIndicador=rowIdx=>{if(indicadores.length>1){setIndicadores(prev=>{const newIndicadores=[...prev];newIndicadores.splice(rowIdx,1);return newIndicadores;});setHasUnsavedChanges(true);}};// Função para atualizar donoProcesso no backend\nconst updateDonoProcessoBackend=async newDonoProcesso=>{try{console.log(\"Atualizando donoProcesso no backend:\",{originalFilename,nomeProcesso,newDonoProcesso});const response=await fetch(\"https://api9001.duckdns.org/files/update-dono-processo\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({processId:nomeProcesso,donoProcesso:newDonoProcesso})});if(!response.ok){throw new Error(\"Erro ao atualizar donoProcesso no backend\");}const result=await response.json();console.log(\"donoProcesso atualizado com sucesso:\",result);return true;}catch(error){console.error(\"Erro ao atualizar donoProcesso:\",error);return false;}};// Função personalizada para setDonoProcesso que também atualiza o backend\nconst handleSetDonoProcesso=async newDonoProcesso=>{if(donoProcesso!==newDonoProcesso){// addHistoryEntry('Modificou', 'Dono do Processo', donoProcesso, newDonoProcesso); // REMOVIDO: só grava histórico ao guardar\n}// Atualiza o estado local\nsetDonoProcesso(newDonoProcesso);setHasUnsavedChanges(true);// Atualiza no backend\nawait updateDonoProcessoBackend(newDonoProcesso);};// Wrappers para outros setters que marcam mudanças\nconst handleSetObjetivoProcesso=value=>{if(objetivoProcesso!==value){// addHistoryEntry('Modificou', 'Objetivo do Processo', objetivoProcesso, value); // REMOVIDO: só grava histórico ao guardar\n}setObjetivoProcesso(value);setHasUnsavedChanges(true);};const handleSetServicosEntrada=value=>{if(servicosEntrada!==value){// addHistoryEntry('Modificou', 'Serviços de Entrada', servicosEntrada, value); // REMOVIDO: só grava histórico ao guardar\n}setServicosEntrada(value);setHasUnsavedChanges(true);};const handleSetServicoSaida=value=>{if(servicoSaida!==value){// addHistoryEntry('Modificou', 'Serviço de Saída', servicoSaida, value); // REMOVIDO: só grava histórico ao guardar\n}setServicoSaida(value);setHasUnsavedChanges(true);};// Reinicializa estado quando o template muda\nuseEffect(()=>{const initial=template.reduce((acc,t)=>_objectSpread(_objectSpread({},acc),{},{[t.key]:Array.from({length:t.rows},()=>Array(t.cols).fill(\"\"))}),{});setTableData(initial);setMainFieldNames([...template[1].fieldNames]);// Reinicializa também os estados extra do Template2\nsetAtividades([[\"\",\"\",\"\",\"\",\"\",\"\"],[\"\",\"\",\"\",\"\",\"\",\"\"],[\"\",\"\",\"\",\"\",\"\",\"\"],[\"\",\"\",\"\",\"\",\"\",\"\"]]);// Sempre inicializa indicadores como array para ambos os templates\nsetIndicadores([\"\",\"\",\"\"]);setDonoProcesso(\"\");setObjetivoProcesso(\"\");setServicosEntrada(\"\");setServicoSaida(\"\");// Reset do estado de mudanças não guardadas\nsetHasUnsavedChanges(false);},[template]);// Refs para exportação/preview\nconst mainTableRef=useRef(null);const obsTableRef=useRef(null);// Carregar histórico do backend quando o componente é montado\nuseEffect(()=>{if(nomeProcesso){loadHistoryFromBackend();}},[nomeProcesso]);// Recarrega quando nomeProcesso muda\n// Buscar dados do PDF selecionado (opcional, pode remover se não usar)\nuseEffect(()=>{if(!filename){return;}let currentTemplate=template;fetch(\"https://api9001.duckdns.org/files/pdf-form-data\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({filename:encodeURIComponent(originalFilename)})}).then(res=>{if(!res.ok){if(res.status===503){throw new Error(\"Serviço temporariamente indisponível. Tente novamente mais tarde.\");}else if(res.status===404){throw new Error(\"Ficheiro não encontrado\");}throw new Error(\"Erro no backend ou ficheiro não encontrado\");}return res.json();}).then(formData=>{let mainFields,rowNumbers,maxRow,newMainFieldNames;if(currentTemplate===tabelas){mainFields=Object.keys(formData).filter(f=>/^table2_r\\d+_c\\d+$/.test(f));rowNumbers=mainFields.map(f=>parseInt(f.match(/^table2_r(\\d+)_c\\d+$/)[1],10));maxRow=Math.max(...rowNumbers,1);newMainFieldNames=[];for(let row=2;row<=maxRow;row++){const rowFields=[];for(let col=1;col<=currentTemplate[1].cols;col++){rowFields.push(\"table2_r\".concat(row,\"_c\").concat(col));}newMainFieldNames.push(rowFields);}}else{mainFields=Object.keys(formData).filter(f=>/^t2_table2_r\\d+_c\\d+$/.test(f));rowNumbers=mainFields.map(f=>parseInt(f.match(/^t2_table2_r(\\d+)_c\\d+$/)[1],10));maxRow=Math.max(...rowNumbers,2);newMainFieldNames=[];for(let row=2;row<=maxRow;row++){const rowFields=[];for(let col=1;col<=currentTemplate[1].cols;col++){rowFields.push(\"t2_table2_r\".concat(row,\"_c\").concat(col));}newMainFieldNames.push(rowFields);}}setMainFieldNames(newMainFieldNames);setTableData(prev=>{const newState=_objectSpread(_objectSpread({},prev),{},{main:newMainFieldNames.map(row=>row.map(field=>formData[field]||\"\")),obs:currentTemplate[0].fieldNames?currentTemplate[0].fieldNames.map(row=>row.map(field=>formData[field]||\"\")):Array.from({length:currentTemplate[0].rows},()=>Array(currentTemplate[0].cols).fill(\"\"))});// Definir valores originais das tabelas para comparação\nsetObsTableOriginal(JSON.parse(JSON.stringify(newState.obs)));setMainTableOriginal(JSON.parse(JSON.stringify(newState.main)));return newState;});// Atualiza os estados extra do Template2\nif(currentTemplate===tabelasTemplate2){const donoProcessoValue=formData.dono_processo||\"\";setDonoProcesso(donoProcessoValue);setDonoProcessoOriginal(donoProcessoValue);// Definir valor original\nconst objetivoProcessoValue=formData.objetivo_processo||\"\";setObjetivoProcesso(objetivoProcessoValue);setObjetivoProcessoOriginal(objetivoProcessoValue);// Definir valor original\n// Busca por linhas adicionais de atividades dinâmicamente\nconst atividadeFields=Object.keys(formData).filter(f=>/^atividades_r\\d+_c\\d+$/.test(f));const atividadeRowNumbers=atividadeFields.map(f=>parseInt(f.match(/^atividades_r(\\d+)_c\\d+$/)[1],10));const maxAtividadeRow=Math.max(...atividadeRowNumbers,4);const novasAtividades=[];for(let row=1;row<=maxAtividadeRow;row++){novasAtividades.push([formData[\"atividades_r\".concat(row,\"_c1\")]||\"\",formData[\"atividades_r\".concat(row,\"_c2\")]||\"\",formData[\"atividades_r\".concat(row,\"_c3\")]||\"\",formData[\"atividades_r\".concat(row,\"_c4\")]||\"\",formData[\"atividades_r\".concat(row,\"_c5\")]||\"\",formData[\"atividades_r\".concat(row,\"_c6\")]||\"\"]);}setAtividades(novasAtividades);setAtividadesOriginal(JSON.parse(JSON.stringify(novasAtividades)));// Definir valor original\n// Busca por indicadores dinamicamente\nconst indicadorFields=Object.keys(formData).filter(f=>/^indicadores_r\\d+$/.test(f));const indicadorNumbers=indicadorFields.map(f=>parseInt(f.match(/^indicadores_r(\\d+)$/)[1],10));const maxIndicadorNumber=Math.max(...indicadorNumbers,3);const novosIndicadores=[];for(let i=1;i<=maxIndicadorNumber;i++){novosIndicadores.push(formData[\"indicadores_r\".concat(i)]||\"\");}setIndicadores(novosIndicadores);setIndicadoresOriginal(JSON.parse(JSON.stringify(novosIndicadores)));// Definir valor original\nconst servicosEntradaValue=formData.servicos_entrada||\"\";setServicosEntrada(servicosEntradaValue);setServicosEntradaOriginal(servicosEntradaValue);// Definir valor original\nconst servicoSaidaValue=formData.servico_saida||\"\";setServicoSaida(servicoSaidaValue);setServicoSaidaOriginal(servicoSaidaValue);// Definir valor original\n}else{// Para Template 1, também carrega os serviços se existirem\nconst servicosEntradaValue=formData.servicos_entrada||\"\";setServicosEntrada(servicosEntradaValue);setServicosEntradaOriginal(servicosEntradaValue);// Definir valor original\nconst servicoSaidaValue=formData.servico_saida||\"\";setServicoSaida(servicoSaidaValue);setServicoSaidaOriginal(servicoSaidaValue);// Definir valor original\n}// Reset do estado de mudanças após carregar dados\nsetHasUnsavedChanges(false);}).catch(err=>{console.error(\"Erro ao carregar dados do PDF:\",err);// Show user-friendly error message\nif(err.message.includes(\"temporariamente indisponível\")){alert(\"Serviço temporariamente indisponível. Os dados não foram carregados, mas pode continuar a trabalhar com dados em branco.\");}else if(err.message.includes(\"não encontrado\")){console.log(\"Ficheiro não encontrado - continuando com dados em branco\");}else{console.log(\"Erro ao carregar dados - continuando com dados em branco\");}});},[filename,originalFilename]);// Função para adicionar uma linha à tabela principal (apenas para template 1)\nconst handleAddRow=()=>{if(template===tabelas){const newRowIdx=mainFieldNames.length+2;const newFieldRow=Array.from({length:tabelas[1].cols},(_,colIdx)=>\"table2_r\".concat(newRowIdx,\"_c\").concat(colIdx+1));setMainFieldNames(prev=>{const novo=[...prev,newFieldRow];return novo;});setTableData(prev=>{const novo=_objectSpread(_objectSpread({},prev),{},{main:[...prev.main,Array(tabelas[1].cols).fill(\"\")]});return novo;});setHasUnsavedChanges(true);}};// Função para adicionar linha em posição específica\nconst handleAddRowAt=function(position,newRow){let isMainTable=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(template===tabelas){const tableKey=isMainTable?'main':'obs';setTableData(prev=>{const newData=[...prev[tableKey]];newData.splice(position,0,newRow);return _objectSpread(_objectSpread({},prev),{},{[tableKey]:newData});});if(isMainTable){setMainFieldNames(prev=>{const newFieldNames=[...prev];const newRowIdx=position+2;const newFieldRow=Array.from({length:tabelas[1].cols},(_,colIdx)=>\"table2_r\".concat(newRowIdx,\"_c\").concat(colIdx+1));newFieldNames.splice(position,0,newFieldRow);return newFieldNames;});}setHasUnsavedChanges(true);}};// Função para deletar linha\nconst handleDeleteRowAt=function(rowIdx){let isMainTable=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;if(template===tabelas){const tableKey=isMainTable?'main':'obs';setTableData(prev=>{const newData=[...prev[tableKey]];if(newData.length>1){newData.splice(rowIdx,1);}return _objectSpread(_objectSpread({},prev),{},{[tableKey]:newData});});if(isMainTable){setMainFieldNames(prev=>{const newFieldNames=[...prev];if(newFieldNames.length>1){newFieldNames.splice(rowIdx,1);}return newFieldNames;});}setHasUnsavedChanges(true);}};// Função para mover linha\nconst handleMoveRowAt=function(fromIdx,toIdx){let isMainTable=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(template===tabelas){const tableKey=isMainTable?'main':'obs';setTableData(prev=>{const newData=[...prev[tableKey]];const[movedRow]=newData.splice(fromIdx,1);newData.splice(toIdx,0,movedRow);return _objectSpread(_objectSpread({},prev),{},{[tableKey]:newData});});if(isMainTable){setMainFieldNames(prev=>{const newFieldNames=[...prev];const[movedFieldRow]=newFieldNames.splice(fromIdx,1);newFieldNames.splice(toIdx,0,movedFieldRow);return newFieldNames;});}setHasUnsavedChanges(true);}};// Funções específicas para mover linhas para cima/baixo\nconst handleMoveRowUp=function(rowIdx){let isMainTable=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;if(rowIdx>0){handleMoveRowAt(rowIdx,rowIdx-1,isMainTable);}};const handleMoveRowDown=function(rowIdx){let isMainTable=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;const tableKey=isMainTable?'main':'obs';const tableLength=tableData[tableKey].length;if(rowIdx<tableLength-1){handleMoveRowAt(rowIdx,rowIdx+1,isMainTable);}};// Funções específicas para inserir linhas acima/abaixo\nconst handleInsertRowAbove=function(rowIdx){let isMainTable=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;const newRow=isMainTable?[\"\",\"\",\"\",\"\",\"\"]:[\"\"];handleAddRowAt(rowIdx,newRow,isMainTable);};const handleInsertRowBelow=function(rowIdx){let isMainTable=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;const newRow=isMainTable?[\"\",\"\",\"\",\"\",\"\"]:[\"\"];handleAddRowAt(rowIdx+1,newRow,isMainTable);};// Função para adicionar registo ao histórico\nconst addHistoryEntry=function(acao,descricao){let valorAnterior=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let valorNovo=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;console.log('🔍 DEBUG addHistoryEntry chamada:',{acao,descricao,valorAnterior,valorNovo});const data=new Date().toLocaleString('pt-PT',{day:'2-digit',month:'long',year:'numeric',hour:'2-digit',minute:'2-digit'});let descricaoCompleta=descricao;if(valorAnterior!==null&&valorNovo!==null){// Não registra se os valores são idênticos\nif(valorAnterior===valorNovo){console.log('🔍 DEBUG Valores idênticos, não registrando no histórico:',{valorAnterior,valorNovo});return;}const anteriorTruncado=valorAnterior.length>30?valorAnterior.substring(0,27)+'...':valorAnterior;const novoTruncado=valorNovo.length>30?valorNovo.substring(0,27)+'...':valorNovo;descricaoCompleta=\"\".concat(descricao,\": de \\\"\").concat(anteriorTruncado,\"\\\" para \\\"\").concat(novoTruncado,\"\\\"\");}// Verifica se já existe uma entrada idêntica recente (últimos 5 segundos)\nconst agora=Date.now();const entradaRecente=history.find(entry=>{const entryTime=new Date(entry.data.replace(' às ',' ').replace(' de ','/').replace(' de ','/')).getTime();return agora-entryTime<5000&&entry.utilizador===(username||(user===null||user===void 0?void 0:user.name)||(user===null||user===void 0?void 0:user.email)||'Utilizador')&&entry.acao===acao&&entry.descricao===descricaoCompleta;});if(entradaRecente){console.log('🔍 DEBUG Entrada duplicada detectada, não adicionando ao histórico');return;}const novaEntrada={data,utilizador:username||(user===null||user===void 0?void 0:user.name)||(user===null||user===void 0?void 0:user.email)||'Utilizador',acao,descricao:descricaoCompleta};console.log('🔍 DEBUG Nova entrada de histórico criada:',novaEntrada);setHistory(prev=>{const novoHistorico=[...prev,novaEntrada];console.log('🔍 DEBUG Histórico atualizado:',novoHistorico);return novoHistorico;});};// Função para limpar o histórico (apenas para debug)\nconst clearHistory=()=>{if(window.confirm('Tem a certeza que quer limpar todo o histórico? Esta ação não pode ser desfeita.')){setHistory([]);console.log('Histórico limpo pelo utilizador:',username);}};// Nova função para salvar histórico no backend\nconst saveHistoryToBackend=async historyData=>{try{console.log('💾 Salvando histórico no backend para:',nomeProcesso);const response=await fetch(\"https://api9001.duckdns.org/files/save-process-history\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({processId:nomeProcesso,history:historyData})});if(!response.ok){throw new Error(\"Erro HTTP: \".concat(response.status));}const result=await response.json();console.log('✅ Histórico salvo no backend:',result);return true;}catch(error){console.error('❌ Erro ao salvar histórico no backend:',error);return false;}};// Nova função para carregar histórico do backend\nconst loadHistoryFromBackend=async()=>{try{if(!nomeProcesso)return;console.log('📥 Carregando histórico do backend para:',nomeProcesso);const response=await fetch(\"https://api9001.duckdns.org/files/get-process-data\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({processId:nomeProcesso})});if(!response.ok){throw new Error(\"Erro HTTP: \".concat(response.status));}const result=await response.json();if(result.exists&&result.data&&result.data.history){console.log('✅ Histórico carregado do backend:',result.data.history.length,'entradas');setHistory(result.data.history);}else{console.log('ℹ️ Nenhum histórico encontrado no backend para:',nomeProcesso);}}catch(error){console.error('❌ Erro ao carregar histórico do backend:',error);}};// Função para guardar alterações e registar histórico detalhado\nfunction handleSave(){const agora=new Date().toLocaleString('pt-PT',{day:'2-digit',month:'long',year:'numeric',hour:'2-digit',minute:'2-digit'});// Lista das alterações específicas feitas\nconst alteracoes=[];// Verificar mudanças no dono do processo\nif(donoProcesso!==donoProcessoOriginal){alteracoes.push(\"Dono do Processo: de \\\"\".concat(donoProcessoOriginal||'vazio',\"\\\" para \\\"\").concat(donoProcesso,\"\\\"\"));}// Verificar mudanças no objetivo do processo\nif(objetivoProcesso!==objetivoProcessoOriginal){alteracoes.push(\"Objetivo do Processo: de \\\"\".concat(objetivoProcessoOriginal||'vazio',\"\\\" para \\\"\").concat(objetivoProcesso,\"\\\"\"));}// Verificar mudanças nos serviços de entrada\nif(servicosEntrada!==servicosEntradaOriginal){alteracoes.push(\"Servi\\xE7os de Entrada: de \\\"\".concat(servicosEntradaOriginal||'vazio',\"\\\" para \\\"\").concat(servicosEntrada,\"\\\"\"));}// Verificar mudanças no serviço de saída\nif(servicoSaida!==servicoSaidaOriginal){alteracoes.push(\"Servi\\xE7o de Sa\\xEDda: de \\\"\".concat(servicoSaidaOriginal||'vazio',\"\\\" para \\\"\").concat(servicoSaida,\"\\\"\"));}// Verificar mudanças na tabela de observações\nif(obsTableOriginal.length>0&&tableData.obs){for(let rowIdx=0;rowIdx<Math.max(obsTableOriginal.length,tableData.obs.length);rowIdx++){const linhaOriginal=obsTableOriginal[rowIdx]||[];const linhaAtual=tableData.obs[rowIdx]||[];for(let colIdx=0;colIdx<Math.max(linhaOriginal.length,linhaAtual.length);colIdx++){const valorOriginal=linhaOriginal[colIdx]||'';const valorAtual=linhaAtual[colIdx]||'';if(valorOriginal!==valorAtual){alteracoes.push(\"Tabela Observa\\xE7\\xF5es (linha \".concat(rowIdx+1,\"): de \\\"\").concat(valorOriginal||'vazio',\"\\\" para \\\"\").concat(valorAtual,\"\\\"\"));}}}}// Verificar mudanças na tabela principal\nif(mainTableOriginal.length>0&&tableData.main){for(let rowIdx=0;rowIdx<Math.max(mainTableOriginal.length,tableData.main.length);rowIdx++){const linhaOriginal=mainTableOriginal[rowIdx]||[];const linhaAtual=tableData.main[rowIdx]||[];for(let colIdx=0;colIdx<Math.max(linhaOriginal.length,linhaAtual.length);colIdx++){const valorOriginal=linhaOriginal[colIdx]||'';const valorAtual=linhaAtual[colIdx]||'';if(valorOriginal!==valorAtual){// Definir nomes das colunas baseado no template\nconst nomeColuna=template===tabelasTemplate2?['Etapa','Atividade','Responsável','Documentos','Instruções','Observações'][colIdx]||\"Coluna \".concat(colIdx+1):['Fluxo das Ações','Descrição','Responsável','Documentos Associados','Instruções de Trabalho'][colIdx]||\"Coluna \".concat(colIdx+1);alteracoes.push(\"\".concat(nomeColuna,\" (linha \").concat(rowIdx+1,\"): de \\\"\").concat(valorOriginal||'vazio',\"\\\" para \\\"\").concat(valorAtual,\"\\\"\"));}}}}// Verificar mudanças nas atividades (Template 2)\nif(template===tabelasTemplate2&&atividadesOriginal.length>0&&atividades){for(let rowIdx=0;rowIdx<Math.max(atividadesOriginal.length,atividades.length);rowIdx++){const linhaOriginal=atividadesOriginal[rowIdx]||[];const linhaAtual=atividades[rowIdx]||[];for(let colIdx=0;colIdx<Math.max(linhaOriginal.length,linhaAtual.length);colIdx++){const valorOriginal=linhaOriginal[colIdx]||'';const valorAtual=linhaAtual[colIdx]||'';if(valorOriginal!==valorAtual){const nomeColunaAtividade=['Etapa','Atividade','Responsável','Documentos','Instruções','Observações'][colIdx]||\"Coluna \".concat(colIdx+1);alteracoes.push(\"Atividades - \".concat(nomeColunaAtividade,\" (linha \").concat(rowIdx+1,\"): de \\\"\").concat(valorOriginal||'vazio',\"\\\" para \\\"\").concat(valorAtual,\"\\\"\"));}}}}// Verificar mudanças nos indicadores (Template 2)\nif(template===tabelasTemplate2&&indicadoresOriginal.length>0&&indicadores){for(let idx=0;idx<Math.max(indicadoresOriginal.length,indicadores.length);idx++){const valorOriginal=indicadoresOriginal[idx]||'';const valorAtual=indicadores[idx]||'';if(valorOriginal!==valorAtual){alteracoes.push(\"Indicador \".concat(idx+1,\": de \\\"\").concat(valorOriginal||'vazio',\"\\\" para \\\"\").concat(valorAtual,\"\\\"\"));}}}// Se há alterações específicas, regista-las\nif(alteracoes.length>0){alteracoes.forEach(alteracao=>{addHistoryEntry('Modificou',alteracao);});}// Sempre adiciona uma entrada geral de salvamento\naddHistoryEntry('Guardou',\"Documento atualizado em \".concat(agora));setHasUnsavedChanges(false);// Salvar histórico no backend após atualizar estado local\nsetTimeout(()=>{setHistory(currentHistory=>{saveHistoryToBackend(currentHistory);return currentHistory;});},100);// Pequeno delay para garantir que o estado foi atualizado\n// Atualizar valores originais após salvar\nsetDonoProcessoOriginal(donoProcesso);setObjetivoProcessoOriginal(objetivoProcesso);setServicosEntradaOriginal(servicosEntrada);setServicoSaidaOriginal(servicoSaida);setObsTableOriginal(JSON.parse(JSON.stringify(tableData.obs||[])));setMainTableOriginal(JSON.parse(JSON.stringify(tableData.main||[])));// Atualizar valores originais específicos do Template 2\nif(template===tabelasTemplate2){setAtividadesOriginal(JSON.parse(JSON.stringify(atividades||[])));setIndicadoresOriginal(JSON.parse(JSON.stringify(indicadores||[])));}}// Função para obter o HTML das tabelas para exportação\nconst getTablesHtml=()=>{let mainTableHtml=\"\";let obsTableHtml=\"\";if(mainTableRef.current){// Clone da tabela principal para remover a coluna de ações\nconst mainTableClone=mainTableRef.current.cloneNode(true);// Remove a coluna \"Ações\" do cabeçalho (última coluna)\nconst headerRow=mainTableClone.querySelector('thead tr');if(headerRow){const lastHeaderCell=headerRow.lastElementChild;if(lastHeaderCell&&lastHeaderCell.textContent.includes('Ações')){lastHeaderCell.remove();}}// Remove a coluna \"Ações\" de todas as linhas do corpo (última coluna)\nconst bodyRows=mainTableClone.querySelectorAll('tbody tr');bodyRows.forEach((row,rowIdx)=>{const lastCell=row.lastElementChild;if(lastCell){lastCell.remove();}// Substitui o conteúdo das células dos componentes especiais pelos valores reais\nconst cells=row.querySelectorAll('td');cells.forEach((cell,colIdx)=>{// Coluna 3 - Documentos Associados\nif(colIdx===3){const value=tableData.main[rowIdx]?tableData.main[rowIdx][colIdx]:'';cell.innerHTML=value.split('\\n').join('<br>');}// Coluna 4 - Instruções de trabalho procedimento  \nelse if(colIdx===4){const rowData=tableData.main[rowIdx];const value=rowData?rowData[colIdx]:'';console.log(\"\\uD83D\\uDD0D DEBUG PDF - Linha \".concat(rowIdx,\", Coluna \").concat(colIdx,\" (Instru\\xE7\\xF5es):\"),value);console.log(\"\\uD83D\\uDD0D DEBUG PDF - Row Data Completa:\",rowData);console.log(\"\\uD83D\\uDD0D DEBUG PDF - tableData.main completo:\",tableData.main);cell.innerHTML=value.split('\\n').join('<br>');}});});mainTableHtml=mainTableClone.outerHTML;}if(obsTableRef.current){obsTableHtml=obsTableRef.current.outerHTML;}// Adiciona tabela de histórico invisível (só aparece no PDF)\nlet historyTableHtml=\"\";if(history&&history.length>0){historyTableHtml=\"\\n        <div style=\\\"display: none; page-break-before: always;\\\" class=\\\"history-section-for-pdf\\\">\\n          <h3 style=\\\"font-size: 14px; font-weight: bold; margin: 15px 0 10px 0;\\\">Hist\\xF3rico de Altera\\xE7\\xF5es</h3>\\n          <table border=\\\"1\\\" cellpadding=\\\"3\\\" cellspacing=\\\"0\\\" style=\\\"width: 100%; border-collapse: collapse; margin-top: 5px; font-size: 9px; table-layout: fixed;\\\">\\n            <thead>\\n              <tr style=\\\"background-color: #f0f0f0;\\\">\\n                <th style=\\\"padding: 4px; border: 1px solid #000; font-weight: bold; width: 15%;\\\">Data</th>\\n                <th style=\\\"padding: 4px; border: 1px solid #000; font-weight: bold; width: 15%;\\\">Utilizador</th>\\n                <th style=\\\"padding: 4px; border: 1px solid #000; font-weight: bold; width: 15%;\\\">A\\xE7\\xE3o</th>\\n                <th style=\\\"padding: 4px; border: 1px solid #000; font-weight: bold; width: 55%;\\\">Descri\\xE7\\xE3o</th>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              \".concat(history.map(item=>\"\\n                <tr>\\n                  <td style=\\\"padding: 4px; border: 1px solid #000; word-wrap: break-word; overflow-wrap: break-word;\\\">\".concat(item.data||'',\"</td>\\n                  <td style=\\\"padding: 4px; border: 1px solid #000; word-wrap: break-word; overflow-wrap: break-word;\\\">\").concat(item.utilizador||'',\"</td>\\n                  <td style=\\\"padding: 4px; border: 1px solid #000; word-wrap: break-word; overflow-wrap: break-word;\\\">\").concat(item.acao||'',\"</td>\\n                  <td style=\\\"padding: 4px; border: 1px solid #000; word-wrap: break-word; overflow-wrap: break-word; max-width: 300px;\\\">\").concat((item.descricao||'').replace(/\"/g,'&quot;'),\"</td>\\n                </tr>\\n              \")).join(''),\"\\n            </tbody>\\n          </table>\\n        </div>\\n      \");}return{mainTableHtml:mainTableHtml+historyTableHtml,obsTableHtml};};// Logs do estado atual a cada render\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[isTemplate2?/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(TabelaPdf,{templateType:2,isEditable:isEditable,setIsEditable:setIsEditable,canEdit:canEdit,isSuperAdmin:isSuperAdmin,data:tableData.main,dataObs:tableData.obs,atividades:atividades,servicosEntrada:servicosEntrada,setServicosEntrada:handleSetServicosEntrada,servicoSaida:servicoSaida,setServicoSaida:handleSetServicoSaida,indicadores:indicadores,donoProcesso:donoProcesso,donoProcessoOriginal:donoProcessoOriginal,setDonoProcesso:handleSetDonoProcesso,objetivoProcesso:objetivoProcesso,setObjetivoProcesso:handleSetObjetivoProcesso,funcionarios:funcionarios,handleAtividadesChange:handleAtividadesChange,handleIndicadoresChange:handleIndicadoresChange,onMoveAtividadeUp:handleMoveAtividadeUp,onMoveAtividadeDown:handleMoveAtividadeDown,onInsertAtividadeAbove:handleInsertAtividadeAbove,onInsertAtividadeBelow:handleInsertAtividadeBelow,onDeleteAtividade:handleDeleteAtividade,onMoveIndicadorUp:handleMoveIndicadorUp,onMoveIndicadorDown:handleMoveIndicadorDown,onInsertIndicadorAbove:handleInsertIndicadorAbove,onInsertIndicadorBelow:handleInsertIndicadorBelow,onDeleteIndicador:handleDeleteIndicador,pathFilename:originalFilename,onSaveSuccess:handleSave,history:history,clearHistory:clearHistory,handleChange:(rowIdx,colIdx,value)=>{const valorAnterior=tableData.main[rowIdx]?tableData.main[rowIdx][colIdx]:'';setTableData(prev=>{const newData=prev.main.map(row=>[...row]);newData[rowIdx][colIdx]=value;return _objectSpread(_objectSpread({},prev),{},{main:newData});});setHasUnsavedChanges(true);// Debounce removido - histórico só é criado ao guardar\n// clearTimeout(window.template2TableTimeout);\n// window.template2TableTimeout = setTimeout(() => {\n//   if (valorAnterior !== value) {\n//     addHistoryEntry('Modificou', `Tabela principal (linha ${rowIdx + 1}, coluna ${colIdx + 1})`, valorAnterior, value);\n//   }\n// }, 500);\n}})}):/*#__PURE__*/_jsx(Template1,{isEditable:isEditable,setIsEditable:setIsEditable,canEdit:canEdit,useNewAttachmentManager:true// Usa o novo gerenciador de anexos\n,data:tableData.main,dataObs:tableData.obs,originalFilename:originalFilename,handleChange:(rowIdx,colIdx,value)=>{const valorAnterior=tableData.main[rowIdx]?tableData.main[rowIdx][colIdx]:'';setTableData(prev=>{const newData=prev.main.map(row=>[...row]);newData[rowIdx][colIdx]=value;return _objectSpread(_objectSpread({},prev),{},{main:newData});});setHasUnsavedChanges(true);// Debounce removido - histórico só é criado ao guardar\n// clearTimeout(window.mainTableTimeout);\n// window.mainTableTimeout = setTimeout(() => {\n//   if (valorAnterior !== value) {\n//     const colunas = ['Fluxo das Ações', 'Descrição', 'Responsável', 'Documentos Associados', 'Instruções de Trabalho'];\n//     const nomeColuna = colunas[colIdx] || `Coluna ${colIdx + 1}`;\n//     addHistoryEntry('Modificou', `${nomeColuna} (linha ${rowIdx + 1})`, valorAnterior, value);\n//   }\n// }, 500);\n},handleChangeObs:(rowIdx,colIdx,value)=>{const valorAnterior=tableData.obs[rowIdx]?tableData.obs[rowIdx][colIdx]:'';setTableData(prev=>{const newData=prev.obs.map(row=>[...row]);newData[rowIdx][colIdx]=value;return _objectSpread(_objectSpread({},prev),{},{obs:newData});});setHasUnsavedChanges(true);// Debounce removido - histórico só é criado ao guardar\n// clearTimeout(window.obsTableTimeout);\n// window.obsTableTimeout = setTimeout(() => {\n//   if (valorAnterior !== value) {\n//     const secoes = ['Objetivos', 'Âmbito', 'Referências Normativas', 'Termos e Definições', 'Procedimento'];\n//     const nomeSecao = secoes[rowIdx] || `Seção ${rowIdx + 1}`;\n//     addHistoryEntry('Modificou', nomeSecao, valorAnterior, value);\n//   }\n// }, 500);\n},headers:template[1].headers,headersObs:template[0].headers,headersHtml:template[1].headers,headersHtmlObs:template[0].headers,templateType:1,servicosEntrada:servicosEntrada,servicoSaida:servicoSaida,setServicosEntrada:handleSetServicosEntrada,setServicoSaida:handleSetServicoSaida,onMoveRowUp:rowIdx=>handleMoveRowUp(rowIdx,true),onMoveRowDown:rowIdx=>handleMoveRowDown(rowIdx,true),onInsertRowAbove:rowIdx=>handleInsertRowAbove(rowIdx,true),onInsertRowBelow:rowIdx=>handleInsertRowBelow(rowIdx,true),onDeleteRow:rowIdx=>handleDeleteRowAt(rowIdx,true),onAddRowObs:rowIdx=>handleInsertRowBelow(rowIdx,false),onDeleteRowObs:rowIdx=>handleDeleteRowAt(rowIdx,false),atividades:atividades,donoProcesso:donoProcesso,objetivoProcesso:objetivoProcesso,indicadores:indicadores,pathFilename:originalFilename,fieldNames:mainFieldNames,onSaveSuccess:()=>setHasUnsavedChanges(false),getTablesHtml:getTablesHtml,obsTableRef:obsTableRef,mainTableRef:mainTableRef,history:history,clearHistory:clearHistory}),/*#__PURE__*/_jsx(AIAssistant,{fileTree:[],searchTerm:\"\",username:username,isAdmin:isAdmin,isSuperAdmin:isSuperAdmin,processOwners:{},onSuggestion:()=>{}})]});}","map":{"version":3,"names":["React","useEffect","useState","useRef","useContext","useParams","useLocation","useNavigate","UserContext","AIAssistant","TabelaPdf","Template1","ExportPdfButton","PreviewPdfButton","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","tabelas","key","headers","fieldNames","rows","cols","children","tabelasTemplate2","TablePageUnified","_location$state","_location$state2","_location$state3","history","setHistory","console","log","user","filename","location","navigate","username","originalFilename","state","decodeURIComponent","replace","nomeProcesso","split","fileNameOnly","pop","template","isTemplate2","test","tableData","setTableData","initial","reduce","acc","t","_objectSpread","Array","from","length","fill","mainFieldNames","setMainFieldNames","atividades","setAtividades","indicadores","setIndicadores","donoProcesso","setDonoProcesso","donoProcessoOriginal","setDonoProcessoOriginal","objetivoProcesso","setObjetivoProcesso","objetivoProcessoOriginal","setObjetivoProcessoOriginal","servicosEntrada","setServicosEntrada","servicosEntradaOriginal","setServicosEntradaOriginal","servicoSaida","setServicoSaida","servicoSaidaOriginal","setServicoSaidaOriginal","obsTableOriginal","setObsTableOriginal","mainTableOriginal","setMainTableOriginal","atividadesOriginal","setAtividadesOriginal","indicadoresOriginal","setIndicadoresOriginal","funcionarios","setFuncionarios","isEditable","setIsEditable","canEditFromState","canEdit","isSuperAdminFromState","isSuperAdmin","isUserOwner","donoProcessoString","donosArray","map","nome","trim","filter","includes","isAdmin","canEditFallback","undefined","carregarFuncionarios","response","fetch","ok","Error","funcionariosData","json","error","hasUnsavedChanges","setHasUnsavedChanges","handleBeforeUnload","e","preventDefault","returnValue","window","addEventListener","removeEventListener","isBlocking","setupBlocker","pushState","blocker","href","_window$history$state","back","handlePopState","event","_event$state","shouldLeave","confirm","go","_window$history$state2","clearTimeout","atividadesTimeout","mainTableTimeout","obsTableTimeout","template2TableTimeout","handleAtividadesChange","rowIdx","colIdx","value","prev","novo","row","handleIndicadoresChange","field","index","startsWith","match","parseInt","handleMoveAtividadeUp","newAtividades","movedRow","splice","handleMoveAtividadeDown","handleInsertAtividadeAbove","newRow","handleInsertAtividadeBelow","handleDeleteAtividade","handleMoveIndicadorUp","newIndicadores","movedItem","handleMoveIndicadorDown","handleInsertIndicadorAbove","handleInsertIndicadorBelow","handleDeleteIndicador","updateDonoProcessoBackend","newDonoProcesso","method","body","JSON","stringify","processId","result","handleSetDonoProcesso","handleSetObjetivoProcesso","handleSetServicosEntrada","handleSetServicoSaida","mainTableRef","obsTableRef","loadHistoryFromBackend","currentTemplate","encodeURIComponent","then","res","status","formData","mainFields","rowNumbers","maxRow","newMainFieldNames","Object","keys","f","Math","max","rowFields","col","push","concat","newState","main","obs","parse","donoProcessoValue","dono_processo","objetivoProcessoValue","objetivo_processo","atividadeFields","atividadeRowNumbers","maxAtividadeRow","novasAtividades","indicadorFields","indicadorNumbers","maxIndicadorNumber","novosIndicadores","i","servicosEntradaValue","servicos_entrada","servicoSaidaValue","servico_saida","catch","err","message","alert","handleAddRow","newRowIdx","newFieldRow","_","handleAddRowAt","position","isMainTable","arguments","tableKey","newData","newFieldNames","handleDeleteRowAt","handleMoveRowAt","fromIdx","toIdx","movedFieldRow","handleMoveRowUp","handleMoveRowDown","tableLength","handleInsertRowAbove","handleInsertRowBelow","addHistoryEntry","acao","descricao","valorAnterior","valorNovo","data","Date","toLocaleString","day","month","year","hour","minute","descricaoCompleta","anteriorTruncado","substring","novoTruncado","agora","now","entradaRecente","find","entry","entryTime","getTime","utilizador","name","email","novaEntrada","novoHistorico","clearHistory","saveHistoryToBackend","historyData","exists","handleSave","alteracoes","linhaOriginal","linhaAtual","valorOriginal","valorAtual","nomeColuna","nomeColunaAtividade","idx","forEach","alteracao","setTimeout","currentHistory","getTablesHtml","mainTableHtml","obsTableHtml","current","mainTableClone","cloneNode","headerRow","querySelector","lastHeaderCell","lastElementChild","textContent","remove","bodyRows","querySelectorAll","lastCell","cells","cell","innerHTML","join","rowData","outerHTML","historyTableHtml","item","templateType","dataObs","onMoveAtividadeUp","onMoveAtividadeDown","onInsertAtividadeAbove","onInsertAtividadeBelow","onDeleteAtividade","onMoveIndicadorUp","onMoveIndicadorDown","onInsertIndicadorAbove","onInsertIndicadorBelow","onDeleteIndicador","pathFilename","onSaveSuccess","handleChange","useNewAttachmentManager","handleChangeObs","headersObs","headersHtml","headersHtmlObs","onMoveRowUp","onMoveRowDown","onInsertRowAbove","onInsertRowBelow","onDeleteRow","onAddRowObs","onDeleteRowObs","fileTree","searchTerm","processOwners","onSuggestion"],"sources":["C:/Users/alex_/Desktop/Magna-ISO9001/src/components/EditorProcedimentos.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useContext } from \"react\";\r\nimport { useParams, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { UserContext } from \"../context/userContext\";\r\nimport AIAssistant from \"./AIAssistant/AIAssistant\";\r\nimport TabelaPdf from \"../pages/tableDisplay\";\r\nimport Template1 from \"./templates/TabelaTemplate1\";\r\nimport ExportPdfButton from \"./Buttons/exportPdf\";\r\nimport PreviewPdfButton from \"./Buttons/previewPDF\";\r\n\r\n// Definição dos dois templates\r\nconst tabelas = [\r\n  {\r\n    key: \"obs\",\r\n    headers: [],\r\n    fieldNames: [\r\n      [\"table1_r1\"],\r\n      [\"table1_r2\"],\r\n      [\"table1_r3\"],\r\n      [\"table1_r4\"],\r\n      [\"table1_r5\"]\r\n    ],\r\n    rows: 5,\r\n    cols: 1\r\n  },\r\n  {\r\n    key: \"main\",\r\n    headers: [\r\n      <>Fluxo<br />das Ações</>,\r\n      <>Descrição</>,\r\n      <>Responsável</>,\r\n      <>Documentos<br />Associados</>,\r\n      <>Instruções<br />de Trabalho</>\r\n    ],\r\n    fieldNames: [\r\n      [\r\n        \"table2_r2_c1\", \"table2_r2_c2\", \"table2_r2_c3\", \"table2_r2_c4\", \"table2_r2_c5\"\r\n      ],\r\n      [\r\n        \"table2_r3_c1\", \"table2_r3_c2\", \"table2_r3_c3\", \"table2_r3_c4\", \"table2_r3_c5\"\r\n      ],\r\n      [\r\n        \"table2_r4_c1\", \"table2_r4_c2\", \"table2_r4_c3\", \"table2_r4_c4\", \"table2_r4_c5\"\r\n      ],\r\n      [\r\n        \"table2_r5_c1\", \"table2_r5_c2\", \"table2_r5_c3\", \"table2_r5_c4\", \"table2_r5_c5\"\r\n      ],\r\n      [\r\n        \"table2_r6_c1\", \"table2_r6_c2\", \"table2_r6_c3\", \"table2_r6_c4\", \"table2_r6_c5\"\r\n      ],\r\n      [\r\n        \"table2_r7_c1\", \"table2_r7_c2\", \"table2_r7_c3\", \"table2_r7_c4\", \"table2_r7_c5\"\r\n      ],      \r\n    ],\r\n    rows: 6,\r\n    cols: 5\r\n  }\r\n];\r\n\r\nconst tabelasTemplate2 = [\r\n  {\r\n    key: \"processo\",\r\n    headers: [\r\n      \"DONO DO PROCESSO (nomeado):\",\r\n      \"OBJETIVO DO PROCESSO:\",\r\n      \"SERVIÇOS DE ENTRADAS\",\r\n      \"SERVIÇO DE SAÍDA\"\r\n    ],\r\n    fieldNames: [\r\n      [\"dono_processo\"],\r\n      [\"objetivo_processo\"],\r\n      [\"servicos_entrada\"],\r\n      [\"servico_saida\"]\r\n    ],\r\n    rows: 4,\r\n    cols: 1\r\n  },\r\n  {\r\n    key: \"main\",\r\n    headers: [\r\n      \"Principais Atividades\",\r\n      \"Procedimentos Associados\",\r\n      \"Requisitos ISO 9001\",\r\n      \"Requisitos DGERT\",\r\n      \"Requisitos EQAVET\",\r\n      \"Requisitos CQCQ\"\r\n    ],\r\n    fieldNames: [\r\n      [\r\n        \"atividades_r1_c1\", \"atividades_r1_c2\", \"atividades_r1_c3\", \"atividades_r1_c4\", \"atividades_r1_c5\", \"atividades_r1_c6\"\r\n      ],\r\n      [\r\n        \"atividades_r2_c1\", \"atividades_r2_c2\", \"atividades_r2_c3\", \"atividades_r2_c4\", \"atividades_r2_c5\", \"atividades_r2_c6\"\r\n      ],\r\n      [\r\n        \"atividades_r3_c1\", \"atividades_r3_c2\", \"atividades_r3_c3\", \"atividades_r3_c4\", \"atividades_r3_c5\", \"atividades_r3_c6\"\r\n      ],\r\n      [\r\n        \"atividades_r4_c1\", \"atividades_r4_c2\", \"atividades_r4_c3\", \"atividades_r4_c4\", \"atividades_r4_c5\", \"atividades_r4_c6\"\r\n      ]\r\n      // Adiciona mais linhas se precisares\r\n    ],\r\n    rows: 4, // Quantas linhas quiseres\r\n    cols: 6\r\n  },\r\n  {\r\n    key: \"indicadores\",\r\n    headers: [\"Indicadores de monitorização do processo\"],\r\n    fieldNames: [\r\n      [\"indicadores_r1\"],\r\n      // Adiciona mais se precisares\r\n    ],\r\n    rows: 2,\r\n    cols: 1\r\n  }\r\n];\r\n\r\nexport default function TablePageUnified() {\r\n  // Estado para histórico de alterações - só adiciona quando guarda\r\n  const [history, setHistory] = useState([]);\r\n  console.log('🔍 DEBUG Estado do histórico:', history);\r\n  const { user } = useContext(UserContext);\r\n  const { filename } = useParams();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  \r\n  // Context do usuário para verificar permissões\r\n  const { username } = useContext(UserContext);\r\n\r\n  const originalFilename =\r\n    location?.state?.originalFilename\r\n      ? location.state.originalFilename\r\n      : decodeURIComponent(filename || \"\").replace(/__/g, '/').replace(/-/g, ' ');\r\n\r\n  // Extrai o nome do processo (antes do primeiro \"/\")\r\n  const nomeProcesso = originalFilename ? originalFilename.split('/')[0] : \"\";\r\n\r\n  // Extrai só o nome do ficheiro (após o último '__')\r\n  const fileNameOnly = filename ? filename.split('__').pop() : \"\";\r\n\r\n  // Escolhe o template conforme o filename\r\n  let template, isTemplate2 = false;\r\n  if (/^\\d{2}/.test(fileNameOnly)) { // Arquivos que começam com 2 dígitos são Template 1\r\n    template = tabelas;\r\n  } else if (/^\\d/.test(fileNameOnly)) { // Arquivos que começam com 1 dígito são Template 2\r\n    template = tabelasTemplate2;\r\n    isTemplate2 = true;\r\n  } else {\r\n    template = tabelas; // fallback para Template 1\r\n  }\r\n\r\n  // Estado das tabelas\r\n  const [tableData, setTableData] = useState(() => {\r\n    const initial = template.reduce((acc, t) => ({ ...acc, [t.key]: Array.from({ length: t.rows }, () => Array(t.cols).fill(\"\")) }), {});\r\n    return initial;\r\n  });\r\n  const [mainFieldNames, setMainFieldNames] = useState(() => {\r\n    return [...template[1].fieldNames];\r\n  });\r\n\r\nconst [atividades, setAtividades] = useState([\r\n  [\"\", \"\", \"\", \"\", \"\", \"\"],\r\n  [\"\", \"\", \"\", \"\", \"\", \"\"],\r\n  [\"\", \"\", \"\", \"\", \"\", \"\"],\r\n  [\"\", \"\", \"\", \"\", \"\", \"\"]\r\n]);\r\nconst [indicadores, setIndicadores] = useState(() => {\r\n  // Inicializa baseado no template\r\n  if (isTemplate2) {\r\n    return [\"\", \"\", \"\"]; // Manter como array para Template2 também para permitir dinamismo\r\n  } else {\r\n    return [\"\", \"\", \"\"];\r\n  }\r\n});\r\nconst [donoProcesso, setDonoProcesso] = useState(\"\");\r\nconst [donoProcessoOriginal, setDonoProcessoOriginal] = useState(\"\");\r\nconst [objetivoProcesso, setObjetivoProcesso] = useState(\"\");\r\nconst [objetivoProcessoOriginal, setObjetivoProcessoOriginal] = useState(\"\");\r\nconst [servicosEntrada, setServicosEntrada] = useState(\"\");\r\nconst [servicosEntradaOriginal, setServicosEntradaOriginal] = useState(\"\");\r\nconst [servicoSaida, setServicoSaida] = useState(\"\");\r\nconst [servicoSaidaOriginal, setServicoSaidaOriginal] = useState(\"\");\r\nconst [obsTableOriginal, setObsTableOriginal] = useState([]);\r\nconst [mainTableOriginal, setMainTableOriginal] = useState([]);\r\nconst [atividadesOriginal, setAtividadesOriginal] = useState([]);\r\nconst [indicadoresOriginal, setIndicadoresOriginal] = useState([]);\r\nconst [funcionarios, setFuncionarios] = useState([]);\r\n\r\n// Estado para controlar se as tabelas são editáveis (inicialmente false)\r\nconst [isEditable, setIsEditable] = useState(false);\r\n\r\n// Receber canEdit do state (calculado em selectPdf) ou fallback para false\r\nconst canEditFromState = location?.state?.canEdit;\r\n\r\n// Receber isSuperAdmin do state (calculado em selectPdf) ou fallback\r\nconst isSuperAdminFromState = location?.state?.isSuperAdmin;\r\n\r\n// Função utilitária para verificar se um usuário está na lista de donos do processo\r\nconst isUserOwner = (donoProcessoString, username) => {\r\n  if (!donoProcessoString || !username) return false;\r\n  const donosArray = donoProcessoString.split(',').map(nome => nome.trim()).filter(nome => nome);\r\n  return donosArray.includes(username);\r\n};\r\n\r\n// Fallback: verificar permissões localmente se não vier do state\r\nconst isAdmin = username === \"superadmin\" || username === \"SuperAdmin\";\r\nconst canEditFallback = isAdmin || isUserOwner(donoProcesso, username);\r\n\r\n// Usar o valor do state se disponível, senão usar fallback\r\nconst canEdit = canEditFromState !== undefined ? canEditFromState : canEditFallback;\r\nconst isSuperAdmin = isSuperAdminFromState !== undefined ? isSuperAdminFromState : isAdmin;\r\n\r\n// Carregar funcionários do backend\r\nuseEffect(() => {\r\n  const carregarFuncionarios = async () => {\r\n    try {\r\n      const response = await fetch(\"https://api9001.duckdns.org/users/getAllUsers\");\r\n      if (!response.ok) {\r\n        throw new Error(\"Erro ao carregar funcionários\");\r\n      }\r\n      const funcionariosData = await response.json();\r\n      setFuncionarios(funcionariosData);\r\n    } catch (error) {\r\n      console.error(\"Erro ao carregar funcionários:\", error);\r\n      setFuncionarios([]); // Array vazio em caso de erro\r\n    }\r\n  };\r\n\r\n  carregarFuncionarios();\r\n}, []);\r\n\r\n// Estado para rastrear se há mudanças não guardadas\r\nconst [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\r\n\r\n// Effect para prevenir saída da página com mudanças não guardadas\r\nuseEffect(() => {\r\n  const handleBeforeUnload = (e) => {\r\n    if (hasUnsavedChanges) {\r\n      e.preventDefault();\r\n      e.returnValue = 'Tem alterações não guardadas. Tem a certeza que quer sair?';\r\n      return 'Tem alterações não guardadas. Tem a certeza que quer sair?';\r\n    }\r\n  };\r\n\r\n  window.addEventListener('beforeunload', handleBeforeUnload);\r\n  \r\n  return () => {\r\n    window.removeEventListener('beforeunload', handleBeforeUnload);\r\n  };\r\n}, [hasUnsavedChanges]);\r\n\r\n// Effect separado para interceptar o botão voltar do browser\r\nuseEffect(() => {\r\n  let isBlocking = false;\r\n\r\n  const setupBlocker = () => {\r\n    if (hasUnsavedChanges && !isBlocking) {\r\n      isBlocking = true;\r\n      // Adiciona um estado \"guardião\" ao histórico\r\n      window.history.pushState({ blocker: true }, '', window.location.href);\r\n    } else if (!hasUnsavedChanges && isBlocking) {\r\n      isBlocking = false;\r\n      // Remove o estado guardião se não há mudanças\r\n      if (window.history.state?.blocker) {\r\n        window.history.back();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handlePopState = (event) => {\r\n    if (hasUnsavedChanges && event.state?.blocker) {\r\n      // Interceptou o botão voltar\r\n      const shouldLeave = window.confirm('Tem alterações não guardadas. Tem a certeza que quer sair?');\r\n      \r\n      if (shouldLeave) {\r\n        // Utilizador quer sair - limpa o estado e navega\r\n        setHasUnsavedChanges(false);\r\n        isBlocking = false;\r\n        // Navega para trás (salta o estado blocker)\r\n        window.history.go(-2);\r\n      } else {\r\n        // Utilizador quer ficar - reestabelece o blocker\r\n        window.history.pushState({ blocker: true }, '', window.location.href);\r\n      }\r\n    }\r\n  };\r\n\r\n  setupBlocker();\r\n  window.addEventListener('popstate', handlePopState);\r\n\r\n  return () => {\r\n    window.removeEventListener('popstate', handlePopState);\r\n    // Limpa o estado blocker se existir\r\n    if (isBlocking && window.history.state?.blocker) {\r\n      window.history.back();\r\n    }\r\n    // Cleanup dos timeouts\r\n    clearTimeout(window.atividadesTimeout);\r\n    clearTimeout(window.mainTableTimeout);\r\n    clearTimeout(window.obsTableTimeout);\r\n    clearTimeout(window.template2TableTimeout);\r\n  };\r\n}, [hasUnsavedChanges]);\r\n\r\n\r\n\r\n  // Handlers para Template2 - removido histórico automático\r\n  const handleAtividadesChange = (rowIdx, colIdx, value) => {\r\n    setAtividades(prev => {\r\n      const novo = prev.map(row => [...row]);\r\n      novo[rowIdx][colIdx] = value;\r\n      return novo;\r\n    });\r\n    setHasUnsavedChanges(true);\r\n  };\r\n  const handleIndicadoresChange = (field, value) => {\r\n    let index = field;\r\n    \r\n    if (isTemplate2) {\r\n      // Para Template2, sempre trata como array mas converte índices se necessário\r\n      if (typeof field === 'string' && field.startsWith('indicadores_r')) {\r\n        // Se receber chave de objeto, converte para índice\r\n        const match = field.match(/indicadores_r(\\d+)/);\r\n        if (match) {\r\n          index = parseInt(match[1]) - 1;\r\n          \r\n          setIndicadores(prev => {\r\n            const novo = [...prev];\r\n            novo[index] = value;\r\n            return novo;\r\n          });\r\n        }\r\n      } else {\r\n        // Se receber índice numérico diretamente\r\n        setIndicadores(prev => {\r\n          const novo = [...prev];\r\n          novo[field] = value;\r\n          return novo;\r\n        });\r\n      }\r\n    } else {\r\n      // Para Template1, trata como array\r\n      setIndicadores(prev => {\r\n        const novo = [...prev];\r\n        novo[field] = value;\r\n        return novo;\r\n      });\r\n    }\r\n    setHasUnsavedChanges(true);\r\n  };\r\n\r\n  // Funções para manipulação de linhas das atividades\r\n  const handleMoveAtividadeUp = (rowIdx) => {\r\n    if (rowIdx > 0) {\r\n      setAtividades(prev => {\r\n        const newAtividades = [...prev];\r\n        const [movedRow] = newAtividades.splice(rowIdx, 1);\r\n        newAtividades.splice(rowIdx - 1, 0, movedRow);\r\n        return newAtividades;\r\n      });\r\n      setHasUnsavedChanges(true);\r\n    }\r\n  };\r\n\r\n  const handleMoveAtividadeDown = (rowIdx) => {\r\n    if (rowIdx < atividades.length - 1) {\r\n      setAtividades(prev => {\r\n        const newAtividades = [...prev];\r\n        const [movedRow] = newAtividades.splice(rowIdx, 1);\r\n        newAtividades.splice(rowIdx + 1, 0, movedRow);\r\n        return newAtividades;\r\n      });\r\n      setHasUnsavedChanges(true);\r\n    }\r\n  };\r\n\r\n  const handleInsertAtividadeAbove = (rowIdx) => {\r\n    const newRow = [\"\", \"\", \"\", \"\", \"\", \"\"];\r\n    setAtividades(prev => {\r\n      const newAtividades = [...prev];\r\n      newAtividades.splice(rowIdx, 0, newRow);\r\n      return newAtividades;\r\n    });\r\n    setHasUnsavedChanges(true);\r\n  };\r\n\r\n  const handleInsertAtividadeBelow = (rowIdx) => {\r\n    const newRow = [\"\", \"\", \"\", \"\", \"\", \"\"];\r\n    setAtividades(prev => {\r\n      const newAtividades = [...prev];\r\n      newAtividades.splice(rowIdx + 1, 0, newRow);\r\n      return newAtividades;\r\n    });\r\n    setHasUnsavedChanges(true);\r\n  };\r\n\r\n  const handleDeleteAtividade = (rowIdx) => {\r\n    if (atividades.length > 1) {\r\n      setAtividades(prev => {\r\n        const newAtividades = [...prev];\r\n        newAtividades.splice(rowIdx, 1);\r\n        return newAtividades;\r\n      });\r\n      setHasUnsavedChanges(true);\r\n    }\r\n  };\r\n\r\n  // Funções para manipulação de indicadores\r\n  const handleMoveIndicadorUp = (rowIdx) => {\r\n    if (rowIdx > 0) {\r\n      setIndicadores(prev => {\r\n        const newIndicadores = [...prev];\r\n        const [movedItem] = newIndicadores.splice(rowIdx, 1);\r\n        newIndicadores.splice(rowIdx - 1, 0, movedItem);\r\n        return newIndicadores;\r\n      });\r\n      setHasUnsavedChanges(true);\r\n    }\r\n  };\r\n\r\n  const handleMoveIndicadorDown = (rowIdx) => {\r\n    if (rowIdx < indicadores.length - 1) {\r\n      setIndicadores(prev => {\r\n        const newIndicadores = [...prev];\r\n        const [movedItem] = newIndicadores.splice(rowIdx, 1);\r\n        newIndicadores.splice(rowIdx + 1, 0, movedItem);\r\n        return newIndicadores;\r\n      });\r\n      setHasUnsavedChanges(true);\r\n    }\r\n  };\r\n\r\n  const handleInsertIndicadorAbove = (rowIdx) => {\r\n    setIndicadores(prev => {\r\n      const newIndicadores = [...prev];\r\n      newIndicadores.splice(rowIdx, 0, \"\");\r\n      return newIndicadores;\r\n    });\r\n    setHasUnsavedChanges(true);\r\n  };\r\n\r\n  const handleInsertIndicadorBelow = (rowIdx) => {\r\n    setIndicadores(prev => {\r\n      const newIndicadores = [...prev];\r\n      newIndicadores.splice(rowIdx + 1, 0, \"\");\r\n      return newIndicadores;\r\n    });\r\n    setHasUnsavedChanges(true);\r\n  };\r\n\r\n  const handleDeleteIndicador = (rowIdx) => {\r\n    if (indicadores.length > 1) {\r\n      setIndicadores(prev => {\r\n        const newIndicadores = [...prev];\r\n        newIndicadores.splice(rowIdx, 1);\r\n        return newIndicadores;\r\n      });\r\n      setHasUnsavedChanges(true);\r\n    }\r\n  };\r\n\r\n  // Função para atualizar donoProcesso no backend\r\n  const updateDonoProcessoBackend = async (newDonoProcesso) => {\r\n    try {\r\n      console.log(\"Atualizando donoProcesso no backend:\", { originalFilename, nomeProcesso, newDonoProcesso });\r\n      \r\n      const response = await fetch(\"https://api9001.duckdns.org/files/update-dono-processo\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ \r\n          processId: nomeProcesso,\r\n          donoProcesso: newDonoProcesso \r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Erro ao atualizar donoProcesso no backend\");\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log(\"donoProcesso atualizado com sucesso:\", result);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Erro ao atualizar donoProcesso:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Função personalizada para setDonoProcesso que também atualiza o backend\r\n  const handleSetDonoProcesso = async (newDonoProcesso) => {\r\n    if (donoProcesso !== newDonoProcesso) {\r\n      // addHistoryEntry('Modificou', 'Dono do Processo', donoProcesso, newDonoProcesso); // REMOVIDO: só grava histórico ao guardar\r\n    }\r\n    \r\n    // Atualiza o estado local\r\n    setDonoProcesso(newDonoProcesso);\r\n    setHasUnsavedChanges(true);\r\n    \r\n    // Atualiza no backend\r\n    await updateDonoProcessoBackend(newDonoProcesso);\r\n  };\r\n\r\n  // Wrappers para outros setters que marcam mudanças\r\n  const handleSetObjetivoProcesso = (value) => {\r\n    if (objetivoProcesso !== value) {\r\n      // addHistoryEntry('Modificou', 'Objetivo do Processo', objetivoProcesso, value); // REMOVIDO: só grava histórico ao guardar\r\n    }\r\n    \r\n    setObjetivoProcesso(value);\r\n    setHasUnsavedChanges(true);\r\n  };\r\n\r\n  const handleSetServicosEntrada = (value) => {\r\n    if (servicosEntrada !== value) {\r\n      // addHistoryEntry('Modificou', 'Serviços de Entrada', servicosEntrada, value); // REMOVIDO: só grava histórico ao guardar\r\n    }\r\n    \r\n    setServicosEntrada(value);\r\n    setHasUnsavedChanges(true);\r\n  };\r\n\r\n  const handleSetServicoSaida = (value) => {\r\n    if (servicoSaida !== value) {\r\n      // addHistoryEntry('Modificou', 'Serviço de Saída', servicoSaida, value); // REMOVIDO: só grava histórico ao guardar\r\n    }\r\n    \r\n    setServicoSaida(value);\r\n    setHasUnsavedChanges(true);\r\n  };\r\n\r\n  // Reinicializa estado quando o template muda\r\n  useEffect(() => {\r\n    const initial = template.reduce((acc, t) => ({\r\n      ...acc,\r\n      [t.key]: Array.from({ length: t.rows }, () => Array(t.cols).fill(\"\"))\r\n    }), {});\r\n    setTableData(initial);\r\n    setMainFieldNames([...template[1].fieldNames]);\r\n    // Reinicializa também os estados extra do Template2\r\n    setAtividades([[\"\", \"\", \"\", \"\", \"\", \"\"],\r\n                   [\"\", \"\", \"\", \"\", \"\", \"\"],\r\n                   [\"\", \"\", \"\", \"\", \"\", \"\"],\r\n                   [\"\", \"\", \"\", \"\", \"\", \"\"]]);\r\n    \r\n    // Sempre inicializa indicadores como array para ambos os templates\r\n    setIndicadores([\"\", \"\", \"\"]);\r\n    \r\n    setDonoProcesso(\"\");\r\n    setObjetivoProcesso(\"\");\r\n    setServicosEntrada(\"\");\r\n    setServicoSaida(\"\");\r\n    // Reset do estado de mudanças não guardadas\r\n    setHasUnsavedChanges(false);\r\n  }, [template]);\r\n\r\n  // Refs para exportação/preview\r\n  const mainTableRef = useRef(null);\r\n  const obsTableRef = useRef(null);\r\n\r\n  // Carregar histórico do backend quando o componente é montado\r\n  useEffect(() => {\r\n    if (nomeProcesso) {\r\n      loadHistoryFromBackend();\r\n    }\r\n  }, [nomeProcesso]); // Recarrega quando nomeProcesso muda\r\n\r\n  // Buscar dados do PDF selecionado (opcional, pode remover se não usar)\r\n  useEffect(() => {\r\n    if (!filename) {\r\n      return;\r\n    }\r\n\r\n    let currentTemplate = template;\r\n\r\n    fetch(\"https://api9001.duckdns.org/files/pdf-form-data\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ filename: encodeURIComponent(originalFilename) }),\r\n    })\r\n      .then(res => {\r\n        if (!res.ok) {\r\n          if (res.status === 503) {\r\n            throw new Error(\"Serviço temporariamente indisponível. Tente novamente mais tarde.\");\r\n          } else if (res.status === 404) {\r\n            throw new Error(\"Ficheiro não encontrado\");\r\n          }\r\n          throw new Error(\"Erro no backend ou ficheiro não encontrado\");\r\n        }\r\n        return res.json();\r\n      })\r\n      .then(formData => {\r\n        let mainFields, rowNumbers, maxRow, newMainFieldNames;\r\n        if (currentTemplate === tabelas) {\r\n          mainFields = Object.keys(formData).filter(f => /^table2_r\\d+_c\\d+$/.test(f));\r\n          rowNumbers = mainFields.map(f => parseInt(f.match(/^table2_r(\\d+)_c\\d+$/)[1], 10));\r\n          maxRow = Math.max(...rowNumbers, 1);\r\n          newMainFieldNames = [];\r\n          for (let row = 2; row <= maxRow; row++) {\r\n            const rowFields = [];\r\n            for (let col = 1; col <= currentTemplate[1].cols; col++) {\r\n              rowFields.push(`table2_r${row}_c${col}`);\r\n            }\r\n            newMainFieldNames.push(rowFields);\r\n          }\r\n        } else {\r\n          mainFields = Object.keys(formData).filter(f => /^t2_table2_r\\d+_c\\d+$/.test(f));\r\n          rowNumbers = mainFields.map(f => parseInt(f.match(/^t2_table2_r(\\d+)_c\\d+$/)[1], 10));\r\n          maxRow = Math.max(...rowNumbers, 2);\r\n          newMainFieldNames = [];\r\n          for (let row = 2; row <= maxRow; row++) {\r\n            const rowFields = [];\r\n            for (let col = 1; col <= currentTemplate[1].cols; col++) {\r\n              rowFields.push(`t2_table2_r${row}_c${col}`);\r\n            }\r\n            newMainFieldNames.push(rowFields);\r\n          }\r\n        }\r\n\r\n\r\n        setMainFieldNames(newMainFieldNames);\r\n\r\n        setTableData(prev => {\r\n          const newState = {\r\n            ...prev,\r\n            main: newMainFieldNames.map(row =>\r\n              row.map(field => formData[field] || \"\")\r\n            ),\r\n            obs: currentTemplate[0].fieldNames\r\n              ? currentTemplate[0].fieldNames.map(row =>\r\n                  row.map(field => formData[field] || \"\")\r\n                )\r\n              : Array.from({ length: currentTemplate[0].rows }, () => Array(currentTemplate[0].cols).fill(\"\"))\r\n          };\r\n          \r\n          // Definir valores originais das tabelas para comparação\r\n          setObsTableOriginal(JSON.parse(JSON.stringify(newState.obs)));\r\n          setMainTableOriginal(JSON.parse(JSON.stringify(newState.main)));\r\n          \r\n          return newState;\r\n        });\r\n\r\n        // Atualiza os estados extra do Template2\r\n        if (currentTemplate === tabelasTemplate2) {\r\n          const donoProcessoValue = formData.dono_processo || \"\";\r\n          setDonoProcesso(donoProcessoValue);\r\n          setDonoProcessoOriginal(donoProcessoValue); // Definir valor original\r\n          \r\n          const objetivoProcessoValue = formData.objetivo_processo || \"\";\r\n          setObjetivoProcesso(objetivoProcessoValue);\r\n          setObjetivoProcessoOriginal(objetivoProcessoValue); // Definir valor original\r\n          \r\n          // Busca por linhas adicionais de atividades dinâmicamente\r\n          const atividadeFields = Object.keys(formData).filter(f => /^atividades_r\\d+_c\\d+$/.test(f));\r\n          const atividadeRowNumbers = atividadeFields.map(f => parseInt(f.match(/^atividades_r(\\d+)_c\\d+$/)[1], 10));\r\n          const maxAtividadeRow = Math.max(...atividadeRowNumbers, 4);\r\n          \r\n          const novasAtividades = [];\r\n          for (let row = 1; row <= maxAtividadeRow; row++) {\r\n            novasAtividades.push([\r\n              formData[`atividades_r${row}_c1`] || \"\",\r\n              formData[`atividades_r${row}_c2`] || \"\",\r\n              formData[`atividades_r${row}_c3`] || \"\",\r\n              formData[`atividades_r${row}_c4`] || \"\",\r\n              formData[`atividades_r${row}_c5`] || \"\",\r\n              formData[`atividades_r${row}_c6`] || \"\",\r\n            ]);\r\n          }\r\n          \r\n          setAtividades(novasAtividades);\r\n          setAtividadesOriginal(JSON.parse(JSON.stringify(novasAtividades))); // Definir valor original\r\n          \r\n          // Busca por indicadores dinamicamente\r\n          const indicadorFields = Object.keys(formData).filter(f => /^indicadores_r\\d+$/.test(f));\r\n          const indicadorNumbers = indicadorFields.map(f => parseInt(f.match(/^indicadores_r(\\d+)$/)[1], 10));\r\n          const maxIndicadorNumber = Math.max(...indicadorNumbers, 3);\r\n          \r\n          const novosIndicadores = [];\r\n          for (let i = 1; i <= maxIndicadorNumber; i++) {\r\n            novosIndicadores.push(formData[`indicadores_r${i}`] || \"\");\r\n          }\r\n          \r\n          setIndicadores(novosIndicadores);\r\n          setIndicadoresOriginal(JSON.parse(JSON.stringify(novosIndicadores))); // Definir valor original\r\n          \r\n          const servicosEntradaValue = formData.servicos_entrada || \"\";\r\n          setServicosEntrada(servicosEntradaValue);\r\n          setServicosEntradaOriginal(servicosEntradaValue); // Definir valor original\r\n          \r\n          const servicoSaidaValue = formData.servico_saida || \"\";\r\n          setServicoSaida(servicoSaidaValue);\r\n          setServicoSaidaOriginal(servicoSaidaValue); // Definir valor original\r\n        } else {\r\n          // Para Template 1, também carrega os serviços se existirem\r\n          const servicosEntradaValue = formData.servicos_entrada || \"\";\r\n          setServicosEntrada(servicosEntradaValue);\r\n          setServicosEntradaOriginal(servicosEntradaValue); // Definir valor original\r\n          \r\n          const servicoSaidaValue = formData.servico_saida || \"\";\r\n          setServicoSaida(servicoSaidaValue);\r\n          setServicoSaidaOriginal(servicoSaidaValue); // Definir valor original\r\n        }\r\n\r\n        // Reset do estado de mudanças após carregar dados\r\n        setHasUnsavedChanges(false);\r\n      })\r\n      .catch(err => {\r\n        console.error(\"Erro ao carregar dados do PDF:\", err);\r\n        // Show user-friendly error message\r\n        if (err.message.includes(\"temporariamente indisponível\")) {\r\n          alert(\"Serviço temporariamente indisponível. Os dados não foram carregados, mas pode continuar a trabalhar com dados em branco.\");\r\n        } else if (err.message.includes(\"não encontrado\")) {\r\n          console.log(\"Ficheiro não encontrado - continuando com dados em branco\");\r\n        } else {\r\n          console.log(\"Erro ao carregar dados - continuando com dados em branco\");\r\n        }\r\n      });\r\n  }, [filename, originalFilename]);\r\n\r\n  // Função para adicionar uma linha à tabela principal (apenas para template 1)\r\n  const handleAddRow = () => {\r\n    if (template === tabelas) {\r\n      const newRowIdx = mainFieldNames.length + 2;\r\n      const newFieldRow = Array.from({ length: tabelas[1].cols }, (_, colIdx) =>\r\n        `table2_r${newRowIdx}_c${colIdx + 1}`\r\n      );\r\n      setMainFieldNames(prev => {\r\n        const novo = [...prev, newFieldRow];\r\n        return novo;\r\n      });\r\n      setTableData(prev => {\r\n        const novo = {\r\n          ...prev,\r\n          main: [...prev.main, Array(tabelas[1].cols).fill(\"\")]\r\n        };\r\n        return novo;\r\n      });\r\n      setHasUnsavedChanges(true);\r\n    }\r\n  };\r\n\r\n  // Função para adicionar linha em posição específica\r\n  const handleAddRowAt = (position, newRow, isMainTable = true) => {\r\n    if (template === tabelas) {\r\n      const tableKey = isMainTable ? 'main' : 'obs';\r\n      \r\n      setTableData(prev => {\r\n        const newData = [...prev[tableKey]];\r\n        newData.splice(position, 0, newRow);\r\n        return { ...prev, [tableKey]: newData };\r\n      });\r\n\r\n      if (isMainTable) {\r\n        setMainFieldNames(prev => {\r\n          const newFieldNames = [...prev];\r\n          const newRowIdx = position + 2;\r\n          const newFieldRow = Array.from({ length: tabelas[1].cols }, (_, colIdx) =>\r\n            `table2_r${newRowIdx}_c${colIdx + 1}`\r\n          );\r\n          newFieldNames.splice(position, 0, newFieldRow);\r\n          return newFieldNames;\r\n        });\r\n      }\r\n      \r\n      setHasUnsavedChanges(true);\r\n    }\r\n  };\r\n\r\n  // Função para deletar linha\r\n  const handleDeleteRowAt = (rowIdx, isMainTable = true) => {\r\n    if (template === tabelas) {\r\n      const tableKey = isMainTable ? 'main' : 'obs';\r\n      \r\n      setTableData(prev => {\r\n        const newData = [...prev[tableKey]];\r\n        if (newData.length > 1) {\r\n          newData.splice(rowIdx, 1);\r\n        }\r\n        return { ...prev, [tableKey]: newData };\r\n      });\r\n\r\n      if (isMainTable) {\r\n        setMainFieldNames(prev => {\r\n          const newFieldNames = [...prev];\r\n          if (newFieldNames.length > 1) {\r\n            newFieldNames.splice(rowIdx, 1);\r\n          }\r\n          return newFieldNames;\r\n        });\r\n      }\r\n      \r\n      setHasUnsavedChanges(true);\r\n    }\r\n  };\r\n\r\n  // Função para mover linha\r\n  const handleMoveRowAt = (fromIdx, toIdx, isMainTable = true) => {\r\n    if (template === tabelas) {\r\n      const tableKey = isMainTable ? 'main' : 'obs';\r\n      \r\n      setTableData(prev => {\r\n        const newData = [...prev[tableKey]];\r\n        const [movedRow] = newData.splice(fromIdx, 1);\r\n        newData.splice(toIdx, 0, movedRow);\r\n        return { ...prev, [tableKey]: newData };\r\n      });\r\n\r\n      if (isMainTable) {\r\n        setMainFieldNames(prev => {\r\n          const newFieldNames = [...prev];\r\n          const [movedFieldRow] = newFieldNames.splice(fromIdx, 1);\r\n          newFieldNames.splice(toIdx, 0, movedFieldRow);\r\n          return newFieldNames;\r\n        });\r\n      }\r\n      \r\n      setHasUnsavedChanges(true);\r\n    }\r\n  };\r\n\r\n  // Funções específicas para mover linhas para cima/baixo\r\n  const handleMoveRowUp = (rowIdx, isMainTable = true) => {\r\n    if (rowIdx > 0) {\r\n      handleMoveRowAt(rowIdx, rowIdx - 1, isMainTable);\r\n    }\r\n  };\r\n\r\n  const handleMoveRowDown = (rowIdx, isMainTable = true) => {\r\n    const tableKey = isMainTable ? 'main' : 'obs';\r\n    const tableLength = tableData[tableKey].length;\r\n    if (rowIdx < tableLength - 1) {\r\n      handleMoveRowAt(rowIdx, rowIdx + 1, isMainTable);\r\n    }\r\n  };\r\n\r\n  // Funções específicas para inserir linhas acima/abaixo\r\n  const handleInsertRowAbove = (rowIdx, isMainTable = true) => {\r\n    const newRow = isMainTable ? [\"\", \"\", \"\", \"\", \"\"] : [\"\"];\r\n    handleAddRowAt(rowIdx, newRow, isMainTable);\r\n  };\r\n\r\n  const handleInsertRowBelow = (rowIdx, isMainTable = true) => {\r\n    const newRow = isMainTable ? [\"\", \"\", \"\", \"\", \"\"] : [\"\"];\r\n    handleAddRowAt(rowIdx + 1, newRow, isMainTable);\r\n  };\r\n\r\n  // Função para adicionar registo ao histórico\r\n  const addHistoryEntry = (acao, descricao, valorAnterior = null, valorNovo = null) => {\r\n    console.log('🔍 DEBUG addHistoryEntry chamada:', { acao, descricao, valorAnterior, valorNovo });\r\n    \r\n    const data = new Date().toLocaleString('pt-PT', { day: '2-digit', month: 'long', year: 'numeric', hour: '2-digit', minute: '2-digit' });\r\n    \r\n    let descricaoCompleta = descricao;\r\n    if (valorAnterior !== null && valorNovo !== null) {\r\n      // Não registra se os valores são idênticos\r\n      if (valorAnterior === valorNovo) {\r\n        console.log('🔍 DEBUG Valores idênticos, não registrando no histórico:', { valorAnterior, valorNovo });\r\n        return;\r\n      }\r\n      \r\n      const anteriorTruncado = valorAnterior.length > 30 ? valorAnterior.substring(0, 27) + '...' : valorAnterior;\r\n      const novoTruncado = valorNovo.length > 30 ? valorNovo.substring(0, 27) + '...' : valorNovo;\r\n      descricaoCompleta = `${descricao}: de \"${anteriorTruncado}\" para \"${novoTruncado}\"`;\r\n    }\r\n    \r\n    // Verifica se já existe uma entrada idêntica recente (últimos 5 segundos)\r\n    const agora = Date.now();\r\n    const entradaRecente = history.find(entry => {\r\n      const entryTime = new Date(entry.data.replace(' às ', ' ').replace(' de ', '/').replace(' de ', '/')).getTime();\r\n      return (agora - entryTime < 5000) && \r\n             entry.utilizador === (username || user?.name || user?.email || 'Utilizador') &&\r\n             entry.acao === acao &&\r\n             entry.descricao === descricaoCompleta;\r\n    });\r\n    \r\n    if (entradaRecente) {\r\n      console.log('🔍 DEBUG Entrada duplicada detectada, não adicionando ao histórico');\r\n      return;\r\n    }\r\n    \r\n    const novaEntrada = {\r\n      data,\r\n      utilizador: username || user?.name || user?.email || 'Utilizador',\r\n      acao,\r\n      descricao: descricaoCompleta\r\n    };\r\n    \r\n    console.log('🔍 DEBUG Nova entrada de histórico criada:', novaEntrada);\r\n    \r\n    setHistory(prev => {\r\n      const novoHistorico = [...prev, novaEntrada];\r\n      console.log('🔍 DEBUG Histórico atualizado:', novoHistorico);\r\n      return novoHistorico;\r\n    });\r\n  };\r\n\r\n  // Função para limpar o histórico (apenas para debug)\r\n  const clearHistory = () => {\r\n    if (window.confirm('Tem a certeza que quer limpar todo o histórico? Esta ação não pode ser desfeita.')) {\r\n      setHistory([]);\r\n      console.log('Histórico limpo pelo utilizador:', username);\r\n    }\r\n  };\r\n\r\n  // Nova função para salvar histórico no backend\r\n  const saveHistoryToBackend = async (historyData) => {\r\n    try {\r\n      console.log('💾 Salvando histórico no backend para:', nomeProcesso);\r\n      \r\n      const response = await fetch(\"https://api9001.duckdns.org/files/save-process-history\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ \r\n          processId: nomeProcesso, \r\n          history: historyData \r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Erro HTTP: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('✅ Histórico salvo no backend:', result);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ Erro ao salvar histórico no backend:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Nova função para carregar histórico do backend\r\n  const loadHistoryFromBackend = async () => {\r\n    try {\r\n      if (!nomeProcesso) return;\r\n      \r\n      console.log('📥 Carregando histórico do backend para:', nomeProcesso);\r\n      \r\n      const response = await fetch(\"https://api9001.duckdns.org/files/get-process-data\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ processId: nomeProcesso }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Erro HTTP: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.exists && result.data && result.data.history) {\r\n        console.log('✅ Histórico carregado do backend:', result.data.history.length, 'entradas');\r\n        setHistory(result.data.history);\r\n      } else {\r\n        console.log('ℹ️ Nenhum histórico encontrado no backend para:', nomeProcesso);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Erro ao carregar histórico do backend:', error);\r\n    }\r\n  };\r\n\r\n  // Função para guardar alterações e registar histórico detalhado\r\n  function handleSave() {\r\n    const agora = new Date().toLocaleString('pt-PT', { day: '2-digit', month: 'long', year: 'numeric', hour: '2-digit', minute: '2-digit' });\r\n    \r\n    // Lista das alterações específicas feitas\r\n    const alteracoes = [];\r\n    \r\n    // Verificar mudanças no dono do processo\r\n    if (donoProcesso !== donoProcessoOriginal) {\r\n      alteracoes.push(`Dono do Processo: de \"${donoProcessoOriginal || 'vazio'}\" para \"${donoProcesso}\"`);\r\n    }\r\n    \r\n    // Verificar mudanças no objetivo do processo\r\n    if (objetivoProcesso !== objetivoProcessoOriginal) {\r\n      alteracoes.push(`Objetivo do Processo: de \"${objetivoProcessoOriginal || 'vazio'}\" para \"${objetivoProcesso}\"`);\r\n    }\r\n    \r\n    // Verificar mudanças nos serviços de entrada\r\n    if (servicosEntrada !== servicosEntradaOriginal) {\r\n      alteracoes.push(`Serviços de Entrada: de \"${servicosEntradaOriginal || 'vazio'}\" para \"${servicosEntrada}\"`);\r\n    }\r\n    \r\n    // Verificar mudanças no serviço de saída\r\n    if (servicoSaida !== servicoSaidaOriginal) {\r\n      alteracoes.push(`Serviço de Saída: de \"${servicoSaidaOriginal || 'vazio'}\" para \"${servicoSaida}\"`);\r\n    }\r\n    \r\n    // Verificar mudanças na tabela de observações\r\n    if (obsTableOriginal.length > 0 && tableData.obs) {\r\n      for (let rowIdx = 0; rowIdx < Math.max(obsTableOriginal.length, tableData.obs.length); rowIdx++) {\r\n        const linhaOriginal = obsTableOriginal[rowIdx] || [];\r\n        const linhaAtual = tableData.obs[rowIdx] || [];\r\n        \r\n        for (let colIdx = 0; colIdx < Math.max(linhaOriginal.length, linhaAtual.length); colIdx++) {\r\n          const valorOriginal = linhaOriginal[colIdx] || '';\r\n          const valorAtual = linhaAtual[colIdx] || '';\r\n          \r\n          if (valorOriginal !== valorAtual) {\r\n            alteracoes.push(`Tabela Observações (linha ${rowIdx + 1}): de \"${valorOriginal || 'vazio'}\" para \"${valorAtual}\"`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Verificar mudanças na tabela principal\r\n    if (mainTableOriginal.length > 0 && tableData.main) {\r\n      for (let rowIdx = 0; rowIdx < Math.max(mainTableOriginal.length, tableData.main.length); rowIdx++) {\r\n        const linhaOriginal = mainTableOriginal[rowIdx] || [];\r\n        const linhaAtual = tableData.main[rowIdx] || [];\r\n        \r\n        for (let colIdx = 0; colIdx < Math.max(linhaOriginal.length, linhaAtual.length); colIdx++) {\r\n          const valorOriginal = linhaOriginal[colIdx] || '';\r\n          const valorAtual = linhaAtual[colIdx] || '';\r\n          \r\n          if (valorOriginal !== valorAtual) {\r\n            // Definir nomes das colunas baseado no template\r\n            const nomeColuna = template === tabelasTemplate2 \r\n              ? ['Etapa', 'Atividade', 'Responsável', 'Documentos', 'Instruções', 'Observações'][colIdx] || `Coluna ${colIdx + 1}`\r\n              : ['Fluxo das Ações', 'Descrição', 'Responsável', 'Documentos Associados', 'Instruções de Trabalho'][colIdx] || `Coluna ${colIdx + 1}`;\r\n            \r\n            alteracoes.push(`${nomeColuna} (linha ${rowIdx + 1}): de \"${valorOriginal || 'vazio'}\" para \"${valorAtual}\"`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Verificar mudanças nas atividades (Template 2)\r\n    if (template === tabelasTemplate2 && atividadesOriginal.length > 0 && atividades) {\r\n      for (let rowIdx = 0; rowIdx < Math.max(atividadesOriginal.length, atividades.length); rowIdx++) {\r\n        const linhaOriginal = atividadesOriginal[rowIdx] || [];\r\n        const linhaAtual = atividades[rowIdx] || [];\r\n        \r\n        for (let colIdx = 0; colIdx < Math.max(linhaOriginal.length, linhaAtual.length); colIdx++) {\r\n          const valorOriginal = linhaOriginal[colIdx] || '';\r\n          const valorAtual = linhaAtual[colIdx] || '';\r\n          \r\n          if (valorOriginal !== valorAtual) {\r\n            const nomeColunaAtividade = ['Etapa', 'Atividade', 'Responsável', 'Documentos', 'Instruções', 'Observações'][colIdx] || `Coluna ${colIdx + 1}`;\r\n            alteracoes.push(`Atividades - ${nomeColunaAtividade} (linha ${rowIdx + 1}): de \"${valorOriginal || 'vazio'}\" para \"${valorAtual}\"`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Verificar mudanças nos indicadores (Template 2)\r\n    if (template === tabelasTemplate2 && indicadoresOriginal.length > 0 && indicadores) {\r\n      for (let idx = 0; idx < Math.max(indicadoresOriginal.length, indicadores.length); idx++) {\r\n        const valorOriginal = indicadoresOriginal[idx] || '';\r\n        const valorAtual = indicadores[idx] || '';\r\n        \r\n        if (valorOriginal !== valorAtual) {\r\n          alteracoes.push(`Indicador ${idx + 1}: de \"${valorOriginal || 'vazio'}\" para \"${valorAtual}\"`);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Se há alterações específicas, regista-las\r\n    if (alteracoes.length > 0) {\r\n      alteracoes.forEach(alteracao => {\r\n        addHistoryEntry('Modificou', alteracao);\r\n      });\r\n    }\r\n    \r\n    // Sempre adiciona uma entrada geral de salvamento\r\n    addHistoryEntry('Guardou', `Documento atualizado em ${agora}`);\r\n    \r\n    setHasUnsavedChanges(false);\r\n    \r\n    // Salvar histórico no backend após atualizar estado local\r\n    setTimeout(() => {\r\n      setHistory(currentHistory => {\r\n        saveHistoryToBackend(currentHistory);\r\n        return currentHistory;\r\n      });\r\n    }, 100); // Pequeno delay para garantir que o estado foi atualizado\r\n    \r\n    // Atualizar valores originais após salvar\r\n    setDonoProcessoOriginal(donoProcesso);\r\n    setObjetivoProcessoOriginal(objetivoProcesso);\r\n    setServicosEntradaOriginal(servicosEntrada);\r\n    setServicoSaidaOriginal(servicoSaida);\r\n    setObsTableOriginal(JSON.parse(JSON.stringify(tableData.obs || [])));\r\n    setMainTableOriginal(JSON.parse(JSON.stringify(tableData.main || [])));\r\n    \r\n    // Atualizar valores originais específicos do Template 2\r\n    if (template === tabelasTemplate2) {\r\n      setAtividadesOriginal(JSON.parse(JSON.stringify(atividades || [])));\r\n      setIndicadoresOriginal(JSON.parse(JSON.stringify(indicadores || [])));\r\n    }\r\n  }\r\n\r\n  // Função para obter o HTML das tabelas para exportação\r\n  const getTablesHtml = () => {\r\n    let mainTableHtml = \"\";\r\n    let obsTableHtml = \"\";\r\n\r\n    if (mainTableRef.current) {\r\n      // Clone da tabela principal para remover a coluna de ações\r\n      const mainTableClone = mainTableRef.current.cloneNode(true);\r\n      \r\n      // Remove a coluna \"Ações\" do cabeçalho (última coluna)\r\n      const headerRow = mainTableClone.querySelector('thead tr');\r\n      if (headerRow) {\r\n        const lastHeaderCell = headerRow.lastElementChild;\r\n        if (lastHeaderCell && lastHeaderCell.textContent.includes('Ações')) {\r\n          lastHeaderCell.remove();\r\n        }\r\n      }\r\n      \r\n      // Remove a coluna \"Ações\" de todas as linhas do corpo (última coluna)\r\n      const bodyRows = mainTableClone.querySelectorAll('tbody tr');\r\n      bodyRows.forEach((row, rowIdx) => {\r\n        const lastCell = row.lastElementChild;\r\n        if (lastCell) {\r\n          lastCell.remove();\r\n        }\r\n        \r\n        // Substitui o conteúdo das células dos componentes especiais pelos valores reais\r\n        const cells = row.querySelectorAll('td');\r\n        cells.forEach((cell, colIdx) => {\r\n          // Coluna 3 - Documentos Associados\r\n          if (colIdx === 3) {\r\n            const value = tableData.main[rowIdx] ? tableData.main[rowIdx][colIdx] : '';\r\n            cell.innerHTML = value.split('\\n').join('<br>');\r\n          }\r\n          // Coluna 4 - Instruções de trabalho procedimento  \r\n          else if (colIdx === 4) {\r\n            const rowData = tableData.main[rowIdx];\r\n            const value = rowData ? rowData[colIdx] : '';\r\n            console.log(`🔍 DEBUG PDF - Linha ${rowIdx}, Coluna ${colIdx} (Instruções):`, value);\r\n            console.log(`🔍 DEBUG PDF - Row Data Completa:`, rowData);\r\n            console.log(`🔍 DEBUG PDF - tableData.main completo:`, tableData.main);\r\n            cell.innerHTML = value.split('\\n').join('<br>');\r\n          }\r\n        });\r\n      });\r\n      \r\n      mainTableHtml = mainTableClone.outerHTML;\r\n    }\r\n\r\n    if (obsTableRef.current) {\r\n      obsTableHtml = obsTableRef.current.outerHTML;\r\n    }\r\n\r\n    // Adiciona tabela de histórico invisível (só aparece no PDF)\r\n    let historyTableHtml = \"\";\r\n    if (history && history.length > 0) {\r\n      historyTableHtml = `\r\n        <div style=\"display: none; page-break-before: always;\" class=\"history-section-for-pdf\">\r\n          <h3 style=\"font-size: 14px; font-weight: bold; margin: 15px 0 10px 0;\">Histórico de Alterações</h3>\r\n          <table border=\"1\" cellpadding=\"3\" cellspacing=\"0\" style=\"width: 100%; border-collapse: collapse; margin-top: 5px; font-size: 9px; table-layout: fixed;\">\r\n            <thead>\r\n              <tr style=\"background-color: #f0f0f0;\">\r\n                <th style=\"padding: 4px; border: 1px solid #000; font-weight: bold; width: 15%;\">Data</th>\r\n                <th style=\"padding: 4px; border: 1px solid #000; font-weight: bold; width: 15%;\">Utilizador</th>\r\n                <th style=\"padding: 4px; border: 1px solid #000; font-weight: bold; width: 15%;\">Ação</th>\r\n                <th style=\"padding: 4px; border: 1px solid #000; font-weight: bold; width: 55%;\">Descrição</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              ${history.map(item => `\r\n                <tr>\r\n                  <td style=\"padding: 4px; border: 1px solid #000; word-wrap: break-word; overflow-wrap: break-word;\">${item.data || ''}</td>\r\n                  <td style=\"padding: 4px; border: 1px solid #000; word-wrap: break-word; overflow-wrap: break-word;\">${item.utilizador || ''}</td>\r\n                  <td style=\"padding: 4px; border: 1px solid #000; word-wrap: break-word; overflow-wrap: break-word;\">${item.acao || ''}</td>\r\n                  <td style=\"padding: 4px; border: 1px solid #000; word-wrap: break-word; overflow-wrap: break-word; max-width: 300px;\">${(item.descricao || '').replace(/\"/g, '&quot;')}</td>\r\n                </tr>\r\n              `).join('')}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      `;\r\n    }\r\n\r\n    return {\r\n      mainTableHtml: mainTableHtml + historyTableHtml,\r\n      obsTableHtml\r\n    };\r\n  };\r\n\r\n  // Logs do estado atual a cada render\r\n  return (\r\n    <div>\r\n      {isTemplate2 ? (\r\n        <>\r\n          <TabelaPdf\r\n            templateType={2}\r\n            isEditable={isEditable}\r\n            setIsEditable={setIsEditable}\r\n            canEdit={canEdit}\r\n            isSuperAdmin={isSuperAdmin}\r\n            data={tableData.main}\r\n            dataObs={tableData.obs}\r\n            atividades={atividades}\r\n            servicosEntrada={servicosEntrada}\r\n            setServicosEntrada={handleSetServicosEntrada}\r\n            servicoSaida={servicoSaida}\r\n            setServicoSaida={handleSetServicoSaida}\r\n            indicadores={indicadores}\r\n            donoProcesso={donoProcesso}\r\n            donoProcessoOriginal={donoProcessoOriginal}\r\n            setDonoProcesso={handleSetDonoProcesso}\r\n            objetivoProcesso={objetivoProcesso}\r\n            setObjetivoProcesso={handleSetObjetivoProcesso}\r\n            funcionarios={funcionarios} \r\n            handleAtividadesChange={handleAtividadesChange}\r\n            handleIndicadoresChange={handleIndicadoresChange}\r\n            onMoveAtividadeUp={handleMoveAtividadeUp}\r\n            onMoveAtividadeDown={handleMoveAtividadeDown}\r\n            onInsertAtividadeAbove={handleInsertAtividadeAbove}\r\n            onInsertAtividadeBelow={handleInsertAtividadeBelow}\r\n            onDeleteAtividade={handleDeleteAtividade}\r\n            onMoveIndicadorUp={handleMoveIndicadorUp}\r\n            onMoveIndicadorDown={handleMoveIndicadorDown}\r\n            onInsertIndicadorAbove={handleInsertIndicadorAbove}\r\n            onInsertIndicadorBelow={handleInsertIndicadorBelow}\r\n            onDeleteIndicador={handleDeleteIndicador}\r\n            pathFilename={originalFilename}\r\n            onSaveSuccess={handleSave}\r\n            history={history}\r\n            clearHistory={clearHistory}\r\n            handleChange={\r\n              (rowIdx, colIdx, value) => {\r\n                const valorAnterior = tableData.main[rowIdx] ? tableData.main[rowIdx][colIdx] : '';\r\n                \r\n                setTableData(prev => {\r\n                  const newData = prev.main.map(row => [...row]);\r\n                  newData[rowIdx][colIdx] = value;\r\n                  return { ...prev, main: newData };\r\n                });\r\n                setHasUnsavedChanges(true);\r\n                \r\n                // Debounce removido - histórico só é criado ao guardar\r\n                // clearTimeout(window.template2TableTimeout);\r\n                // window.template2TableTimeout = setTimeout(() => {\r\n                //   if (valorAnterior !== value) {\r\n                //     addHistoryEntry('Modificou', `Tabela principal (linha ${rowIdx + 1}, coluna ${colIdx + 1})`, valorAnterior, value);\r\n                //   }\r\n                // }, 500);\r\n              }\r\n            }           \r\n          />\r\n        </>\r\n      ) : (\r\n        <Template1\r\n          isEditable={isEditable}\r\n          setIsEditable={setIsEditable}\r\n          canEdit={canEdit}\r\n          useNewAttachmentManager={true} // Usa o novo gerenciador de anexos\r\n          data={tableData.main}\r\n          dataObs={tableData.obs}\r\n          originalFilename={originalFilename}\r\n          handleChange={(rowIdx, colIdx, value) => {\r\n            const valorAnterior = tableData.main[rowIdx] ? tableData.main[rowIdx][colIdx] : '';\r\n            \r\n            setTableData(prev => {\r\n              const newData = prev.main.map(row => [...row]);\r\n              newData[rowIdx][colIdx] = value;\r\n              return { ...prev, main: newData };\r\n            });\r\n            setHasUnsavedChanges(true);\r\n            \r\n            // Debounce removido - histórico só é criado ao guardar\r\n            // clearTimeout(window.mainTableTimeout);\r\n            // window.mainTableTimeout = setTimeout(() => {\r\n            //   if (valorAnterior !== value) {\r\n            //     const colunas = ['Fluxo das Ações', 'Descrição', 'Responsável', 'Documentos Associados', 'Instruções de Trabalho'];\r\n            //     const nomeColuna = colunas[colIdx] || `Coluna ${colIdx + 1}`;\r\n            //     addHistoryEntry('Modificou', `${nomeColuna} (linha ${rowIdx + 1})`, valorAnterior, value);\r\n            //   }\r\n            // }, 500);\r\n          }}\r\n          handleChangeObs={(rowIdx, colIdx, value) => {\r\n            const valorAnterior = tableData.obs[rowIdx] ? tableData.obs[rowIdx][colIdx] : '';\r\n            \r\n            setTableData(prev => {\r\n              const newData = prev.obs.map(row => [...row]);\r\n              newData[rowIdx][colIdx] = value;\r\n              return { ...prev, obs: newData };\r\n            });\r\n            setHasUnsavedChanges(true);\r\n            \r\n            // Debounce removido - histórico só é criado ao guardar\r\n            // clearTimeout(window.obsTableTimeout);\r\n            // window.obsTableTimeout = setTimeout(() => {\r\n            //   if (valorAnterior !== value) {\r\n            //     const secoes = ['Objetivos', 'Âmbito', 'Referências Normativas', 'Termos e Definições', 'Procedimento'];\r\n            //     const nomeSecao = secoes[rowIdx] || `Seção ${rowIdx + 1}`;\r\n            //     addHistoryEntry('Modificou', nomeSecao, valorAnterior, value);\r\n            //   }\r\n            // }, 500);\r\n          }}\r\n          headers={template[1].headers}\r\n          headersObs={template[0].headers}\r\n          headersHtml={template[1].headers}\r\n          headersHtmlObs={template[0].headers}\r\n          templateType={1}\r\n          servicosEntrada={servicosEntrada}\r\n          servicoSaida={servicoSaida}\r\n          setServicosEntrada={handleSetServicosEntrada}\r\n          setServicoSaida={handleSetServicoSaida}\r\n          onMoveRowUp={(rowIdx) => handleMoveRowUp(rowIdx, true)}\r\n          onMoveRowDown={(rowIdx) => handleMoveRowDown(rowIdx, true)}\r\n          onInsertRowAbove={(rowIdx) => handleInsertRowAbove(rowIdx, true)}\r\n          onInsertRowBelow={(rowIdx) => handleInsertRowBelow(rowIdx, true)}\r\n          onDeleteRow={(rowIdx) => handleDeleteRowAt(rowIdx, true)}\r\n          onAddRowObs={(rowIdx) => handleInsertRowBelow(rowIdx, false)}\r\n          onDeleteRowObs={(rowIdx) => handleDeleteRowAt(rowIdx, false)}\r\n          atividades={atividades}\r\n          donoProcesso={donoProcesso}\r\n          objetivoProcesso={objetivoProcesso}\r\n          indicadores={indicadores}\r\n          pathFilename={originalFilename}\r\n          fieldNames={mainFieldNames}\r\n          onSaveSuccess={() => setHasUnsavedChanges(false)}\r\n          getTablesHtml={getTablesHtml}\r\n          obsTableRef={obsTableRef}\r\n          mainTableRef={mainTableRef}\r\n          history={history}\r\n          clearHistory={clearHistory}\r\n  />\r\n      )}\r\n      \r\n      {/* AI Assistant para continuar tutorial */}\r\n      <AIAssistant \r\n        fileTree={[]}\r\n        searchTerm=\"\"\r\n        username={username}\r\n        isAdmin={isAdmin}\r\n        isSuperAdmin={isSuperAdmin}\r\n        processOwners={{}}\r\n        onSuggestion={() => {}}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}